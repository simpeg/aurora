{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4831226b-6033-4b15-a120-d2ef9b81f686",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Process CAS04 with Remote Reference\n",
    "\n",
    "\n",
    "This notebook is a companion to the 2024 JOSS manuscript.\n",
    "\n",
    "This notebook is shows the workflow for getting data from Earthscope for a few example stations and generating transfer functions using aurora.  The data download step is based on condensed version of a tutorial in the mth5 documentation which can be found at: https://github.com/kujaku11/mth5/tree/master/docs/examples/notebooks.  \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "31595e4a-9a71-451a-a811-91e1126cdc99",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:41.503783Z",
     "iopub.status.busy": "2025-08-03T00:29:41.503555Z",
     "iopub.status.idle": "2025-08-03T00:29:41.511615Z",
     "shell.execute_reply": "2025-08-03T00:29:41.510727Z"
    }
   },
   "outputs": [],
   "source": [
    "# %matplotlib notebook \n",
    "# %matplotlib widget\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95ae061a-dc05-471b-a88c-4aaaef4ddc50",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:41.514181Z",
     "iopub.status.busy": "2025-08-03T00:29:41.513919Z",
     "iopub.status.idle": "2025-08-03T00:29:42.965307Z",
     "shell.execute_reply": "2025-08-03T00:29:42.964676Z"
    }
   },
   "outputs": [],
   "source": [
    "#Imports\n",
    "\n",
    "import pandas as pd\n",
    "import pathlib\n",
    "import os\n",
    "#from aurora.sandbox.mth5_channel_summary_helpers import channel_summary_to_make_mth5\n",
    "#from aurora.config import BANDS_DEFAULT_FILE\n",
    "from aurora.config.config_creator import ConfigCreator\n",
    "from aurora.pipelines.process_mth5 import process_mth5\n",
    "from mth5.mth5 import MTH5\n",
    "from mth5.clients.make_mth5 import FDSN\n",
    "from mth5.utils.helpers import initialize_mth5\n",
    "from mth5.processing import RunSummary, KernelDataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d5c3fc25-fb66-4d80-8e76-c9a23f2054c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:42.968156Z",
     "iopub.status.busy": "2025-08-03T00:29:42.967500Z",
     "iopub.status.idle": "2025-08-03T00:29:42.971261Z",
     "shell.execute_reply": "2025-08-03T00:29:42.970656Z"
    }
   },
   "outputs": [],
   "source": [
    "import logging, sys\n",
    "logging.disable(sys.maxsize)\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33e2b452-94f7-4f9e-9cf5-36765541fc2e",
   "metadata": {},
   "source": [
    "# Make MTH5 from IRIS Data Managment Center v0.2.0 \n",
    "\n",
    "This example demonstrates how to build an MTH5 from data archived at IRIS, it could work with any MT data stored at an FDSN data center (probably).\n",
    "\n",
    "We will use the `mth5.clients.FDSN` class to build the file.  There is also second way using the more generic `mth5.clients.MakeMTH5` class, which will be highlighted below. \n",
    "\n",
    "**Note:** this example assumes that data availability (Network, Station, Channel, Start, End) are all previously known.  If you do not know the data that you want to download use [IRIS tools](https://ds.iris.edu/ds/nodes/dmc/tools/##) to get data availability.   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3177306-86bc-43ae-aec3-11a71f75325d",
   "metadata": {},
   "source": [
    "## Initialize a MakeMTH5 object\n",
    "\n",
    "Here, we are setting the MTH5 file version to 0.2.0 so that we can have multiple surveys in a single file.  Also, setting the client to \"IRIS\".  Here, we are using `obspy.clients` tools for the request.  Here are the available [FDSN clients](https://docs.obspy.org/packages/obspy.clients.fdsn.html). \n",
    "\n",
    "**Note:** Only the \"IRIS\" client has been tested."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "46655a42-0bcf-4c86-a972-cb58f0d77158",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:42.974101Z",
     "iopub.status.busy": "2025-08-03T00:29:42.973774Z",
     "iopub.status.idle": "2025-08-03T00:29:42.977013Z",
     "shell.execute_reply": "2025-08-03T00:29:42.976422Z"
    }
   },
   "outputs": [],
   "source": [
    "fdsn_object = FDSN(mth5_version='0.2.0')\n",
    "fdsn_object.client = \"IRIS\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b1c9eb9-b60a-409e-98e7-003bc76c2f77",
   "metadata": {},
   "source": [
    "## Make the data inquiry as a DataFrame\n",
    "\n",
    "There are a few ways to make the inquiry to request data.  \n",
    "\n",
    "1. Make a DataFrame by hand.  Here we will make a list of entries and then create a DataFrame with the proper column names\n",
    "2. You can create a CSV file with a row for each entry. There are some formatting that you need to be aware of.  That is the column names and making sure that date-times are YYYY-MM-DDThh:mm:ss\n",
    "\n",
    "\n",
    "| Column Name         |   Description                                                                                                 |\n",
    "| ------------------- | --------------------------------------------------------------------------------------------------------------|\n",
    "| **network**         | [FDSN Network code (2 letters)](http://www.fdsn.org/networks/)                                                |\n",
    "| **station**         | [FDSN Station code (usually 5 characters)](https://ds.iris.edu/ds/nodes/dmc/data/formats/seed-channel-naming/)|\n",
    "| **location**        | [FDSN Location code (typically not used for MT)](http://docs.fdsn.org/projects/source-identifiers/en/v1.0/location-codes.html) |\n",
    "| **channel**         | [FDSN Channel code (3 characters)](http://docs.fdsn.org/projects/source-identifiers/en/v1.0/channel-codes.html)|\n",
    "| **start**           | Start time (YYYY-MM-DDThh:mm:ss) UTC |\n",
    "| **end**             | End time (YYYY-MM-DDThh:mm:ss) UTC  |\n",
    "\n",
    "In the example below, the stage is set to use two stations: CAS04 and NVR08.  Commented out is an example of how to add a third station, REV06"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1888e0a6-ddf2-428b-a851-b1a9b0f5a0da",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:42.979296Z",
     "iopub.status.busy": "2025-08-03T00:29:42.978843Z",
     "iopub.status.idle": "2025-08-03T00:29:42.992655Z",
     "shell.execute_reply": "2025-08-03T00:29:42.992075Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>network</th>\n",
       "      <th>station</th>\n",
       "      <th>location</th>\n",
       "      <th>channel</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8P</td>\n",
       "      <td>CAS04</td>\n",
       "      <td></td>\n",
       "      <td>LFE</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8P</td>\n",
       "      <td>CAS04</td>\n",
       "      <td></td>\n",
       "      <td>LFN</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8P</td>\n",
       "      <td>CAS04</td>\n",
       "      <td></td>\n",
       "      <td>LFZ</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>8P</td>\n",
       "      <td>CAS04</td>\n",
       "      <td></td>\n",
       "      <td>LQE</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8P</td>\n",
       "      <td>CAS04</td>\n",
       "      <td></td>\n",
       "      <td>LQN</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>8P</td>\n",
       "      <td>NVR08</td>\n",
       "      <td></td>\n",
       "      <td>LFE</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8P</td>\n",
       "      <td>NVR08</td>\n",
       "      <td></td>\n",
       "      <td>LFN</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8P</td>\n",
       "      <td>NVR08</td>\n",
       "      <td></td>\n",
       "      <td>LFZ</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8P</td>\n",
       "      <td>NVR08</td>\n",
       "      <td></td>\n",
       "      <td>LQE</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8P</td>\n",
       "      <td>NVR08</td>\n",
       "      <td></td>\n",
       "      <td>LQN</td>\n",
       "      <td>2020-06-02T19:00:00</td>\n",
       "      <td>2020-07-13T19:00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  network station location channel                start                  end\n",
       "0      8P   CAS04              LFE  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "1      8P   CAS04              LFN  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "2      8P   CAS04              LFZ  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "3      8P   CAS04              LQE  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "4      8P   CAS04              LQN  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "5      8P   NVR08              LFE  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "6      8P   NVR08              LFN  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "7      8P   NVR08              LFZ  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "8      8P   NVR08              LQE  2020-06-02T19:00:00  2020-07-13T19:00:00\n",
       "9      8P   NVR08              LQN  2020-06-02T19:00:00  2020-07-13T19:00:00"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "channels = [\"LFE\", \"LFN\", \"LFZ\", \"LQE\", \"LQN\"]\n",
    "CAS04 = [\"8P\", \"CAS04\",  '2020-06-02T19:00:00', '2020-07-13T19:00:00'] \n",
    "NVR08 = [\"8P\", \"NVR08\", '2020-06-02T19:00:00', '2020-07-13T19:00:00']\n",
    "# REV06 = [\"8P\", \"REV06\", '2020-06-02T19:00:00', '2020-07-13T19:00:00']\n",
    "\n",
    "stations = [CAS04, NVR08,]\n",
    "# stations.append(REV06)\n",
    "\n",
    "request_list = []\n",
    "for entry in stations:\n",
    "    for channel in channels:\n",
    "        request_list.append(\n",
    "            [entry[0], entry[1], \"\", channel, entry[2], entry[3]]\n",
    "        )\n",
    "\n",
    "# Turn list into dataframe\n",
    "request_df =  pd.DataFrame(request_list, columns=fdsn_object.request_columns) \n",
    "request_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "496678c6-18b2-41cb-a0b5-5ebf51bab0eb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:29:42.994693Z",
     "iopub.status.busy": "2025-08-03T00:29:42.994379Z",
     "iopub.status.idle": "2025-08-03T00:31:52.067564Z",
     "shell.execute_reply": "2025-08-03T00:31:52.066954Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.918918+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.922541+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_92.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.940369+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.944583+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_92.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.960387+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.963498+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_92.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.979363+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:41.982463+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_92.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.002268+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.005778+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_92.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.067452+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.071015+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_94.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.091740+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_si_units to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.095601+0000 | INFO | mt_metadata.timeseries.filters.obspy_stages | create_filter_from_stage | Converting PoleZerosResponseStage electric_dipole_94.000 to a CoefficientFilter.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.118748+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterSurvey, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.119767+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Reports, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.382768+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Standards, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:42.388236+0000 | INFO | mth5.mth5 | _initialize_file | Initialized MTH5 0.2.0 file /home/runner/work/aurora/aurora/docs/tutorials/8P_CAS04_NVR08.h5 in mode w\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.392685+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterStation, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.393847+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Reports, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.395393+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Filters, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.659387+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Standards, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.672677+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Station, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.678179+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for TransferFunctions, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.679404+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterFC, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.680528+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterFeatures, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.684981+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.726091+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.765429+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:42.805248+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.336221+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Station, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.341763+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for TransferFunctions, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.343006+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterFC, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.344058+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for MasterFeatures, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.348536+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.386866+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:43.425857+0000 | WARNING | mth5.groups.base | read_metadata | No metadata found for Run, skipping from_dict.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:44.314047+0000 | WARNING | mth5.clients.fdsn | wrangle_runs_into_containers | More or less runs have been requested by the user than are defined in the metadata. Runs will be defined but only the requested run extents contain time series data based on the users request.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:44.320482+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:44.327929+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:44.450542+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-02T19:00:00+00:00 does not match metadata start 2020-06-02T18:41:43+00:00 updating metatdata value to 2020-06-02T19:00:00+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:44.578405+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:44.734705+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:44.886587+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:45.041218+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:45.200782+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:45.259874+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:45.266794+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:45.294232+0000 | INFO | mth5.groups.base | _add_group | RunGroup b already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:45.636912+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:45.801630+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:45.957196+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:46.115354+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:46.274756+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:46.340533+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:46.348227+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:46.375702+0000 | INFO | mth5.groups.base | _add_group | RunGroup b already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:46.403043+0000 | INFO | mth5.groups.base | _add_group | RunGroup c already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:46.840713+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:46.999785+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:47.169389+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:47.338253+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:47.499792+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:47.566881+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:47.574120+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:47.601460+0000 | INFO | mth5.groups.base | _add_group | RunGroup b already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:47.629207+0000 | INFO | mth5.groups.base | _add_group | RunGroup c already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:47.656758+0000 | INFO | mth5.groups.base | _add_group | RunGroup d already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:47.865076+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-07-13T19:00:00+00:00 does not match metadata end 2020-07-13T21:46:12+00:00 updating metatdata value to 2020-07-13T19:00:00+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.032761+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id d. Setting to ch.run_metadata.id to d\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.197801+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id d. Setting to ch.run_metadata.id to d\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.353642+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id d. Setting to ch.run_metadata.id to d\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.514259+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id d. Setting to ch.run_metadata.id to d\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.675880+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id d. Setting to ch.run_metadata.id to d\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:48.742423+0000 | WARNING | mth5.clients.fdsn | wrangle_runs_into_containers | More or less runs have been requested by the user than are defined in the metadata. Runs will be defined but only the requested run extents contain time series data based on the users request.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:48.747315+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:48.753694+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:49.015234+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:49.166508+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:49.319597+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:49.485079+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:49.640019+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id a. Setting to ch.run_metadata.id to a\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:49.696837+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:49.702853+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:49.731357+0000 | INFO | mth5.groups.base | _add_group | RunGroup b already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:50.073052+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:50.228160+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:50.397671+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:50.553596+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:50.721488+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id b. Setting to ch.run_metadata.id to b\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:50.786944+0000 | INFO | mth5.groups.base | _add_group | RunGroup Features already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:50.793186+0000 | INFO | mth5.groups.base | _add_group | RunGroup a already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:50.821531+0000 | INFO | mth5.groups.base | _add_group | RunGroup b already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:50.854773+0000 | INFO | mth5.groups.base | _add_group | RunGroup c already exists, returning existing group.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:51.202287+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:51.357290+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:51.511126+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:51.664435+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:51.822268+0000 | WARNING | mth5.groups.run | from_runts | Channel run.id sr1_001 !=  group run.id c. Setting to ch.run_metadata.id to c\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.062467+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing /home/runner/work/aurora/aurora/docs/tutorials/8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Created /home/runner/work/aurora/aurora/docs/tutorials/8P_CAS04_NVR08.h5\n",
      "CPU times: user 10.6 s, sys: 400 ms, total: 11 s\n",
      "Wall time: 2min 9s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "mth5_filename = fdsn_object.make_mth5_from_fdsn_client(request_df)\n",
    "\n",
    "print(f\"Created {mth5_filename}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7c69ae65-db2c-4fd8-ab2b-2a44ff9085a0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.069788Z",
     "iopub.status.busy": "2025-08-03T00:31:52.069433Z",
     "iopub.status.idle": "2025-08-03T00:31:52.072661Z",
     "shell.execute_reply": "2025-08-03T00:31:52.072038Z"
    }
   },
   "outputs": [],
   "source": [
    "mth5_path = pathlib.Path(\"8P_CAS04_NVR08.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8c07f52e-7e2b-4589-9632-9213d8d7050b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.074844Z",
     "iopub.status.busy": "2025-08-03T00:31:52.074692Z",
     "iopub.status.idle": "2025-08-03T00:31:52.283915Z",
     "shell.execute_reply": "2025-08-03T00:31:52.283336Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survey</th>\n",
       "      <th>station</th>\n",
       "      <th>run</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "      <th>component</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>n_samples</th>\n",
       "      <th>sample_rate</th>\n",
       "      <th>measurement_type</th>\n",
       "      <th>azimuth</th>\n",
       "      <th>tilt</th>\n",
       "      <th>units</th>\n",
       "      <th>has_data</th>\n",
       "      <th>hdf5_reference</th>\n",
       "      <th>run_hdf5_reference</th>\n",
       "      <th>station_hdf5_reference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11267</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11267</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11267</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11267</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11267</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847649</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638043</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034586</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034586</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034586</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>13.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034586</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>103.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>37.633351</td>\n",
       "      <td>-121.468382</td>\n",
       "      <td>335.261765</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034586</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2861</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2861</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2861</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2861</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2861</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>938510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>938510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>938510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>938510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>938510</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ex</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>ey</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>electric</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hx</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>12.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hy</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>102.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>38.326630</td>\n",
       "      <td>-118.082382</td>\n",
       "      <td>1377.902271</td>\n",
       "      <td>hz</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>magnetic</td>\n",
       "      <td>0.0</td>\n",
       "      <td>90.0</td>\n",
       "      <td>digital counts</td>\n",
       "      <td>True</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         survey station run   latitude   longitude    elevation component  \\\n",
       "0   CONUS South   CAS04   a  37.633351 -121.468382   335.261765        ex   \n",
       "1   CONUS South   CAS04   a  37.633351 -121.468382   335.261765        ey   \n",
       "2   CONUS South   CAS04   a  37.633351 -121.468382   335.261765        hx   \n",
       "3   CONUS South   CAS04   a  37.633351 -121.468382   335.261765        hy   \n",
       "4   CONUS South   CAS04   a  37.633351 -121.468382   335.261765        hz   \n",
       "5   CONUS South   CAS04   b  37.633351 -121.468382   335.261765        ex   \n",
       "6   CONUS South   CAS04   b  37.633351 -121.468382   335.261765        ey   \n",
       "7   CONUS South   CAS04   b  37.633351 -121.468382   335.261765        hx   \n",
       "8   CONUS South   CAS04   b  37.633351 -121.468382   335.261765        hy   \n",
       "9   CONUS South   CAS04   b  37.633351 -121.468382   335.261765        hz   \n",
       "10  CONUS South   CAS04   c  37.633351 -121.468382   335.261765        ex   \n",
       "11  CONUS South   CAS04   c  37.633351 -121.468382   335.261765        ey   \n",
       "12  CONUS South   CAS04   c  37.633351 -121.468382   335.261765        hx   \n",
       "13  CONUS South   CAS04   c  37.633351 -121.468382   335.261765        hy   \n",
       "14  CONUS South   CAS04   c  37.633351 -121.468382   335.261765        hz   \n",
       "15  CONUS South   CAS04   d  37.633351 -121.468382   335.261765        ex   \n",
       "16  CONUS South   CAS04   d  37.633351 -121.468382   335.261765        ey   \n",
       "17  CONUS South   CAS04   d  37.633351 -121.468382   335.261765        hx   \n",
       "18  CONUS South   CAS04   d  37.633351 -121.468382   335.261765        hy   \n",
       "19  CONUS South   CAS04   d  37.633351 -121.468382   335.261765        hz   \n",
       "20  CONUS South   NVR08   a  38.326630 -118.082382  1377.902271        ex   \n",
       "21  CONUS South   NVR08   a  38.326630 -118.082382  1377.902271        ey   \n",
       "22  CONUS South   NVR08   a  38.326630 -118.082382  1377.902271        hx   \n",
       "23  CONUS South   NVR08   a  38.326630 -118.082382  1377.902271        hy   \n",
       "24  CONUS South   NVR08   a  38.326630 -118.082382  1377.902271        hz   \n",
       "25  CONUS South   NVR08   b  38.326630 -118.082382  1377.902271        ex   \n",
       "26  CONUS South   NVR08   b  38.326630 -118.082382  1377.902271        ey   \n",
       "27  CONUS South   NVR08   b  38.326630 -118.082382  1377.902271        hx   \n",
       "28  CONUS South   NVR08   b  38.326630 -118.082382  1377.902271        hy   \n",
       "29  CONUS South   NVR08   b  38.326630 -118.082382  1377.902271        hz   \n",
       "30  CONUS South   NVR08   c  38.326630 -118.082382  1377.902271        ex   \n",
       "31  CONUS South   NVR08   c  38.326630 -118.082382  1377.902271        ey   \n",
       "32  CONUS South   NVR08   c  38.326630 -118.082382  1377.902271        hx   \n",
       "33  CONUS South   NVR08   c  38.326630 -118.082382  1377.902271        hy   \n",
       "34  CONUS South   NVR08   c  38.326630 -118.082382  1377.902271        hz   \n",
       "\n",
       "                       start                       end  n_samples  \\\n",
       "0  2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00      11267   \n",
       "1  2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00      11267   \n",
       "2  2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00      11267   \n",
       "3  2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00      11267   \n",
       "4  2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00      11267   \n",
       "5  2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00     847649   \n",
       "6  2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00     847649   \n",
       "7  2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00     847649   \n",
       "8  2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00     847649   \n",
       "9  2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00     847649   \n",
       "10 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00    1638043   \n",
       "11 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00    1638043   \n",
       "12 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00    1638043   \n",
       "13 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00    1638043   \n",
       "14 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00    1638043   \n",
       "15 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00    1034586   \n",
       "16 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00    1034586   \n",
       "17 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00    1034586   \n",
       "18 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00    1034586   \n",
       "19 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00    1034586   \n",
       "20 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00       2861   \n",
       "21 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00       2861   \n",
       "22 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00       2861   \n",
       "23 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00       2861   \n",
       "24 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00       2861   \n",
       "25 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00     938510   \n",
       "26 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00     938510   \n",
       "27 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00     938510   \n",
       "28 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00     938510   \n",
       "29 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00     938510   \n",
       "30 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00     856503   \n",
       "31 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00     856503   \n",
       "32 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00     856503   \n",
       "33 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00     856503   \n",
       "34 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00     856503   \n",
       "\n",
       "    sample_rate measurement_type  azimuth  tilt           units  has_data  \\\n",
       "0           1.0         electric     13.2   0.0  digital counts      True   \n",
       "1           1.0         electric    103.2   0.0  digital counts      True   \n",
       "2           1.0         magnetic     13.2   0.0  digital counts      True   \n",
       "3           1.0         magnetic    103.2   0.0  digital counts      True   \n",
       "4           1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "5           1.0         electric     13.2   0.0  digital counts      True   \n",
       "6           1.0         electric    103.2   0.0  digital counts      True   \n",
       "7           1.0         magnetic     13.2   0.0  digital counts      True   \n",
       "8           1.0         magnetic    103.2   0.0  digital counts      True   \n",
       "9           1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "10          1.0         electric     13.2   0.0  digital counts      True   \n",
       "11          1.0         electric    103.2   0.0  digital counts      True   \n",
       "12          1.0         magnetic     13.2   0.0  digital counts      True   \n",
       "13          1.0         magnetic    103.2   0.0  digital counts      True   \n",
       "14          1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "15          1.0         electric     13.2   0.0  digital counts      True   \n",
       "16          1.0         electric    103.2   0.0  digital counts      True   \n",
       "17          1.0         magnetic     13.2   0.0  digital counts      True   \n",
       "18          1.0         magnetic    103.2   0.0  digital counts      True   \n",
       "19          1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "20          1.0         electric     12.6   0.0  digital counts      True   \n",
       "21          1.0         electric    102.6   0.0  digital counts      True   \n",
       "22          1.0         magnetic     12.6   0.0  digital counts      True   \n",
       "23          1.0         magnetic    102.6   0.0  digital counts      True   \n",
       "24          1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "25          1.0         electric     12.6   0.0  digital counts      True   \n",
       "26          1.0         electric    102.6   0.0  digital counts      True   \n",
       "27          1.0         magnetic     12.6   0.0  digital counts      True   \n",
       "28          1.0         magnetic    102.6   0.0  digital counts      True   \n",
       "29          1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "30          1.0         electric     12.6   0.0  digital counts      True   \n",
       "31          1.0         electric    102.6   0.0  digital counts      True   \n",
       "32          1.0         magnetic     12.6   0.0  digital counts      True   \n",
       "33          1.0         magnetic    102.6   0.0  digital counts      True   \n",
       "34          1.0         magnetic      0.0  90.0  digital counts      True   \n",
       "\n",
       "             hdf5_reference       run_hdf5_reference   station_hdf5_reference  \n",
       "0   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "1   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "2   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "3   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "4   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "5   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "6   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "7   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "8   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "9   <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "10  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "11  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "12  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "13  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "14  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "15  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "16  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "17  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "18  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "19  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "20  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "21  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "22  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "23  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "24  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "25  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "26  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "27  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "28  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "29  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "30  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "31  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "32  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "33  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  \n",
       "34  <HDF5 object reference>  <HDF5 object reference>  <HDF5 object reference>  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m = initialize_mth5(mth5_path)\n",
    "m.channel_summary.summarize()\n",
    "df = m.channel_summary.to_dataframe()\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33ced6db-834d-4be1-9858-42fe12fd86fe",
   "metadata": {},
   "source": [
    "## Fix Survey Name\n",
    "\n",
    "- The survey name is extracted from the metadata provided by Earthscope\n",
    "- The value of the survey name was changed from \"CONUS South\" to \"CONUS SoCal\", and the notebook was updated to reflect this, however, as of June 30, 2024, the name seems to have changed back to \"CONUS South\".\n",
    "- To avoid problems wiht these change of nomencalature we extract the survey name as a variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "757817bc-9c4b-4208-adfd-af8e8ffb3439",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.286238Z",
     "iopub.status.busy": "2025-08-03T00:31:52.285895Z",
     "iopub.status.idle": "2025-08-03T00:31:52.290451Z",
     "shell.execute_reply": "2025-08-03T00:31:52.289887Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'CONUS South'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survey_id = df[\"survey\"].unique()[0]\n",
    "survey_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c859de21-1c56-4393-b971-c732d2cb7735",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.292356Z",
     "iopub.status.busy": "2025-08-03T00:31:52.292211Z",
     "iopub.status.idle": "2025-08-03T00:31:52.296719Z",
     "shell.execute_reply": "2025-08-03T00:31:52.296166Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['CAS04', 'NVR08'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.station.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8a6c8a47-b91d-41e1-ae8d-a5f98d8aeb7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.298931Z",
     "iopub.status.busy": "2025-08-03T00:31:52.298427Z",
     "iopub.status.idle": "2025-08-03T00:31:52.514466Z",
     "shell.execute_reply": "2025-08-03T00:31:52.513846Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.495027+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>channel_scale_factors</th>\n",
       "      <th>duration</th>\n",
       "      <th>end</th>\n",
       "      <th>has_data</th>\n",
       "      <th>input_channels</th>\n",
       "      <th>mth5_path</th>\n",
       "      <th>n_samples</th>\n",
       "      <th>output_channels</th>\n",
       "      <th>run</th>\n",
       "      <th>sample_rate</th>\n",
       "      <th>start</th>\n",
       "      <th>station</th>\n",
       "      <th>survey</th>\n",
       "      <th>run_hdf5_reference</th>\n",
       "      <th>station_hdf5_reference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>11266.0</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>11267</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>a</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>847648.0</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>847649</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>1638042.0</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>1638043</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>c</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>1034585.0</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>1034586</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>d</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>2860.0</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>2861</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>a</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>938509.0</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>938510</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>856502.0</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>856503</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>c</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               channel_scale_factors   duration  \\\n",
       "0  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...    11266.0   \n",
       "1  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   847648.0   \n",
       "2  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...  1638042.0   \n",
       "3  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...  1034585.0   \n",
       "4  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...     2860.0   \n",
       "5  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   938509.0   \n",
       "6  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   856502.0   \n",
       "\n",
       "                        end  has_data input_channels          mth5_path  \\\n",
       "0 2020-06-02 22:07:46+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "1 2020-06-12 17:52:23+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "2 2020-07-01 17:32:59+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "3 2020-07-13 19:00:00+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "4 2020-06-03 19:57:51+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "5 2020-06-14 16:56:02+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "6 2020-06-24 15:55:46+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "\n",
       "   n_samples output_channels run  sample_rate                     start  \\\n",
       "0      11267    [ex, ey, hz]   a          1.0 2020-06-02 19:00:00+00:00   \n",
       "1     847649    [ex, ey, hz]   b          1.0 2020-06-02 22:24:55+00:00   \n",
       "2    1638043    [ex, ey, hz]   c          1.0 2020-06-12 18:32:17+00:00   \n",
       "3    1034586    [ex, ey, hz]   d          1.0 2020-07-01 19:36:55+00:00   \n",
       "4       2861    [ex, ey, hz]   a          1.0 2020-06-03 19:10:11+00:00   \n",
       "5     938510    [ex, ey, hz]   b          1.0 2020-06-03 20:14:13+00:00   \n",
       "6     856503    [ex, ey, hz]   c          1.0 2020-06-14 18:00:44+00:00   \n",
       "\n",
       "  station       survey       run_hdf5_reference   station_hdf5_reference  \n",
       "0   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "1   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "2   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "3   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "4   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "5   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "6   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mth5_run_summary = RunSummary()\n",
    "mth5_run_summary.from_mth5s([mth5_path,])\n",
    "run_summary = mth5_run_summary.clone()\n",
    "run_summary.df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "774d7973-267f-4fc8-a440-a36b7e92fe4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.516705Z",
     "iopub.status.busy": "2025-08-03T00:31:52.516359Z",
     "iopub.status.idle": "2025-08-03T00:31:52.525121Z",
     "shell.execute_reply": "2025-08-03T00:31:52.524490Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survey</th>\n",
       "      <th>station</th>\n",
       "      <th>run</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        survey station run                     start                       end\n",
       "0  CONUS South   CAS04   a 2020-06-02 19:00:00+00:00 2020-06-02 22:07:46+00:00\n",
       "1  CONUS South   CAS04   b 2020-06-02 22:24:55+00:00 2020-06-12 17:52:23+00:00\n",
       "2  CONUS South   CAS04   c 2020-06-12 18:32:17+00:00 2020-07-01 17:32:59+00:00\n",
       "3  CONUS South   CAS04   d 2020-07-01 19:36:55+00:00 2020-07-13 19:00:00+00:00\n",
       "4  CONUS South   NVR08   a 2020-06-03 19:10:11+00:00 2020-06-03 19:57:51+00:00\n",
       "5  CONUS South   NVR08   b 2020-06-03 20:14:13+00:00 2020-06-14 16:56:02+00:00\n",
       "6  CONUS South   NVR08   c 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coverage_short_list_columns = [\"survey\", 'station', 'run', 'start', 'end', ]\n",
    "run_summary.df[coverage_short_list_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "03b8add3-46d5-4f71-a527-3dfb3a284fec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.527116Z",
     "iopub.status.busy": "2025-08-03T00:31:52.526763Z",
     "iopub.status.idle": "2025-08-03T00:31:52.550169Z",
     "shell.execute_reply": "2025-08-03T00:31:52.549680Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.530226+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column fc, adding and setting dtype to <class 'pandas._libs.missing.NAType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.531438+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column remote, adding and setting dtype to <class 'bool'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.532308+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column run_dataarray, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.533113+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column stft, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.534108+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column mth5_obj, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survey</th>\n",
       "      <th>station</th>\n",
       "      <th>run</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2860.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>a</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>2860.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>769090.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>769090.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>167025.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>167025.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856502.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>856502.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        survey station run                     start  \\\n",
       "0  CONUS South   CAS04   b 2020-06-03 19:10:11+00:00   \n",
       "1  CONUS South   NVR08   a 2020-06-03 19:10:11+00:00   \n",
       "2  CONUS South   CAS04   b 2020-06-03 20:14:13+00:00   \n",
       "3  CONUS South   NVR08   b 2020-06-03 20:14:13+00:00   \n",
       "4  CONUS South   CAS04   c 2020-06-12 18:32:17+00:00   \n",
       "5  CONUS South   NVR08   b 2020-06-12 18:32:17+00:00   \n",
       "6  CONUS South   CAS04   c 2020-06-14 18:00:44+00:00   \n",
       "7  CONUS South   NVR08   c 2020-06-14 18:00:44+00:00   \n",
       "\n",
       "                        end  duration  \n",
       "0 2020-06-03 19:57:51+00:00    2860.0  \n",
       "1 2020-06-03 19:57:51+00:00    2860.0  \n",
       "2 2020-06-12 17:52:23+00:00  769090.0  \n",
       "3 2020-06-12 17:52:23+00:00  769090.0  \n",
       "4 2020-06-14 16:56:02+00:00  167025.0  \n",
       "5 2020-06-14 16:56:02+00:00  167025.0  \n",
       "6 2020-06-24 15:55:46+00:00  856502.0  \n",
       "7 2020-06-24 15:55:46+00:00  856502.0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kernel_dataset = KernelDataset()\n",
    "station_id = \"CAS04\"\n",
    "remote_reference_id = \"NVR08\"\n",
    "kernel_dataset.from_run_summary(run_summary, station_id, remote_reference_id)\n",
    "kernel_dataset.mini_summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c2e4c7a9-94a8-4a23-948b-35d78b65b629",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.552007Z",
     "iopub.status.busy": "2025-08-03T00:31:52.551863Z",
     "iopub.status.idle": "2025-08-03T00:31:52.575063Z",
     "shell.execute_reply": "2025-08-03T00:31:52.574445Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.555010+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column fc, adding and setting dtype to <class 'pandas._libs.missing.NAType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.556669+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column remote, adding and setting dtype to <class 'bool'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.557562+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column run_dataarray, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.558485+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column stft, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.559625+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column mth5_obj, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survey</th>\n",
       "      <th>station</th>\n",
       "      <th>run</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        survey station run                     start                       end\n",
       "0  CONUS South   CAS04   b 2020-06-03 20:14:13+00:00 2020-06-12 17:52:23+00:00\n",
       "1  CONUS South   NVR08   b 2020-06-03 20:14:13+00:00 2020-06-12 17:52:23+00:00\n",
       "2  CONUS South   CAS04   c 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00\n",
       "3  CONUS South   NVR08   c 2020-06-14 18:00:44+00:00 2020-06-24 15:55:46+00:00"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kernel_dataset = KernelDataset()\n",
    "kernel_dataset.from_run_summary(run_summary, station_id, remote_reference_id)\n",
    "cutoff_duration_in_seconds = 180000\n",
    "kernel_dataset.drop_runs_shorter_than(cutoff_duration_in_seconds)\n",
    "kernel_dataset.df[coverage_short_list_columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "10a169bf-41c1-4146-bfd1-e5b1b842ddd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.577637Z",
     "iopub.status.busy": "2025-08-03T00:31:52.577270Z",
     "iopub.status.idle": "2025-08-03T00:31:52.604717Z",
     "shell.execute_reply": "2025-08-03T00:31:52.604171Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.585807+0000 | INFO | aurora.config.config_creator | determine_band_specification_style | Bands not defined; setting to EMTF BANDS_DEFAULT_FILE\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "cc = ConfigCreator()\n",
    "config = cc.create_from_kernel_dataset(kernel_dataset,) \n",
    "#                                       emtf_band_file=BANDS_DEFAULT_FILE,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ec03e63c-ec46-4f7c-8f38-e627eed884ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.607018Z",
     "iopub.status.busy": "2025-08-03T00:31:52.606869Z",
     "iopub.status.idle": "2025-08-03T00:31:52.617885Z",
     "shell.execute_reply": "2025-08-03T00:31:52.617082Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\n",
       "    \"processing\": {\n",
       "        \"band_setup_file\": \"/home/runner/work/aurora/aurora/aurora/config/emtf_band_setup/bs_test.cfg\",\n",
       "        \"band_specification_style\": \"EMTF\",\n",
       "        \"channel_nomenclature.ex\": \"ex\",\n",
       "        \"channel_nomenclature.ey\": \"ey\",\n",
       "        \"channel_nomenclature.hx\": \"hx\",\n",
       "        \"channel_nomenclature.hy\": \"hy\",\n",
       "        \"channel_nomenclature.hz\": \"hz\",\n",
       "        \"decimations\": [\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.23828125,\n",
       "                                \"frequency_min\": 0.19140625,\n",
       "                                \"index_max\": 30,\n",
       "                                \"index_min\": 25\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.19140625,\n",
       "                                \"frequency_min\": 0.15234375,\n",
       "                                \"index_max\": 24,\n",
       "                                \"index_min\": 20\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.15234375,\n",
       "                                \"frequency_min\": 0.12109375,\n",
       "                                \"index_max\": 19,\n",
       "                                \"index_min\": 16\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.12109375,\n",
       "                                \"frequency_min\": 0.09765625,\n",
       "                                \"index_max\": 15,\n",
       "                                \"index_min\": 13\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.09765625,\n",
       "                                \"frequency_min\": 0.07421875,\n",
       "                                \"index_max\": 12,\n",
       "                                \"index_min\": 10\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.07421875,\n",
       "                                \"frequency_min\": 0.05859375,\n",
       "                                \"index_max\": 9,\n",
       "                                \"index_min\": 8\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.05859375,\n",
       "                                \"frequency_min\": 0.04296875,\n",
       "                                \"index_max\": 7,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.04296875,\n",
       "                                \"frequency_min\": 0.03515625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 1.0,\n",
       "                    \"decimation.level\": 0,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 1.0,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": false,\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"boxcar\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0341796875,\n",
       "                                \"frequency_min\": 0.0263671875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0263671875,\n",
       "                                \"frequency_min\": 0.0205078125,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 11\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0205078125,\n",
       "                                \"frequency_min\": 0.0166015625,\n",
       "                                \"index_max\": 10,\n",
       "                                \"index_min\": 9\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0166015625,\n",
       "                                \"frequency_min\": 0.0126953125,\n",
       "                                \"index_max\": 8,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0126953125,\n",
       "                                \"frequency_min\": 0.0107421875,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0107421875,\n",
       "                                \"frequency_min\": 0.0087890625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 1,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.25,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": false,\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"boxcar\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.008544921875,\n",
       "                                \"frequency_min\": 0.006591796875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.006591796875,\n",
       "                                \"frequency_min\": 0.005126953125,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 11\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.005126953125,\n",
       "                                \"frequency_min\": 0.004150390625,\n",
       "                                \"index_max\": 10,\n",
       "                                \"index_min\": 9\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.004150390625,\n",
       "                                \"frequency_min\": 0.003173828125,\n",
       "                                \"index_max\": 8,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.003173828125,\n",
       "                                \"frequency_min\": 0.002685546875,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.002685546875,\n",
       "                                \"frequency_min\": 0.002197265625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 2,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.0625,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": false,\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"boxcar\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00274658203125,\n",
       "                                \"frequency_min\": 0.00213623046875,\n",
       "                                \"index_max\": 22,\n",
       "                                \"index_min\": 18\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00213623046875,\n",
       "                                \"frequency_min\": 0.00164794921875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00164794921875,\n",
       "                                \"frequency_min\": 0.00115966796875,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 10\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00115966796875,\n",
       "                                \"frequency_min\": 0.00079345703125,\n",
       "                                \"index_max\": 9,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00079345703125,\n",
       "                                \"frequency_min\": 0.00054931640625,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 3,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.015625,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": false,\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"boxcar\"\n",
       "                }\n",
       "            }\n",
       "        ],\n",
       "        \"id\": \"CAS04_rr_NVR08_sr1\",\n",
       "        \"stations.local.id\": \"CAS04\",\n",
       "        \"stations.local.mth5_path\": \"8P_CAS04_NVR08.h5\",\n",
       "        \"stations.local.remote\": false,\n",
       "        \"stations.local.runs\": [\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"b\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-06-12T17:52:23+00:00\",\n",
       "                                \"start\": \"2020-06-03T20:14:13+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"c\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-06-24T15:55:46+00:00\",\n",
       "                                \"start\": \"2020-06-14T18:00:44+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            }\n",
       "        ],\n",
       "        \"stations.remote\": [\n",
       "            {\n",
       "                \"station\": {\n",
       "                    \"id\": \"NVR08\",\n",
       "                    \"mth5_path\": \"8P_CAS04_NVR08.h5\",\n",
       "                    \"remote\": true,\n",
       "                    \"runs\": [\n",
       "                        {\n",
       "                            \"run\": {\n",
       "                                \"id\": \"b\",\n",
       "                                \"input_channels\": [\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hx\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hy\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    }\n",
       "                                ],\n",
       "                                \"output_channels\": [\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"ex\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"ey\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hz\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    }\n",
       "                                ],\n",
       "                                \"sample_rate\": 1.0,\n",
       "                                \"time_periods\": [\n",
       "                                    {\n",
       "                                        \"time_period\": {\n",
       "                                            \"end\": \"2020-06-12T17:52:23+00:00\",\n",
       "                                            \"start\": \"2020-06-03T20:14:13+00:00\"\n",
       "                                        }\n",
       "                                    }\n",
       "                                ]\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"run\": {\n",
       "                                \"id\": \"c\",\n",
       "                                \"input_channels\": [\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hx\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hy\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    }\n",
       "                                ],\n",
       "                                \"output_channels\": [\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"ex\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"ey\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    },\n",
       "                                    {\n",
       "                                        \"channel\": {\n",
       "                                            \"id\": \"hz\",\n",
       "                                            \"scale_factor\": 1.0\n",
       "                                        }\n",
       "                                    }\n",
       "                                ],\n",
       "                                \"sample_rate\": 1.0,\n",
       "                                \"time_periods\": [\n",
       "                                    {\n",
       "                                        \"time_period\": {\n",
       "                                            \"end\": \"2020-06-24T15:55:46+00:00\",\n",
       "                                            \"start\": \"2020-06-14T18:00:44+00:00\"\n",
       "                                        }\n",
       "                                    }\n",
       "                                ]\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            }\n",
       "        ]\n",
       "    }\n",
       "}"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "31276eea-60b1-4c11-b6f0-92fd1198c63d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.619946Z",
     "iopub.status.busy": "2025-08-03T00:31:52.619626Z",
     "iopub.status.idle": "2025-08-03T00:31:52.622953Z",
     "shell.execute_reply": "2025-08-03T00:31:52.622335Z"
    }
   },
   "outputs": [],
   "source": [
    "for dec_level in config.decimations:\n",
    "    dec_level.stft.window.type = \"hamming\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "586d7a82-da55-47b6-ad81-93f13e7fa4c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.628643Z",
     "iopub.status.busy": "2025-08-03T00:31:52.628263Z",
     "iopub.status.idle": "2025-08-03T00:31:52.631789Z",
     "shell.execute_reply": "2025-08-03T00:31:52.631169Z"
    }
   },
   "outputs": [],
   "source": [
    "tf_file_base = f\"{station_id}_RR{remote_reference_id}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3ba3daaa-5338-4f5f-ac1f-c1c23bfb8422",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:31:52.633798Z",
     "iopub.status.busy": "2025-08-03T00:31:52.633644Z",
     "iopub.status.idle": "2025-08-03T00:32:14.638378Z",
     "shell.execute_reply": "2025-08-03T00:32:14.637858Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.661430+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | Processing Summary Dataframe:\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.668357+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | \n",
      "    duration  has_data  n_samples run station       survey       run_hdf5_reference   station_hdf5_reference    fc  remote  stft mth5_obj dec_level  dec_factor  sample_rate  window_duration  num_samples_window  num_samples  num_stft_windows\n",
      "0   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     769090.0            8011.0\n",
      "1   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     192272.0            2002.0\n",
      "2   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      48068.0             500.0\n",
      "3   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      12017.0             124.0\n",
      "4   856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     856502.0            8921.0\n",
      "5   856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     214125.0            2230.0\n",
      "6   856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      53531.0             557.0\n",
      "7   856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      13382.0             139.0\n",
      "8   769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128     769090.0            8011.0\n",
      "9   769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128     192272.0            2002.0\n",
      "10  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128      48068.0             500.0\n",
      "11  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128      12017.0             124.0\n",
      "12  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128     856502.0            8921.0\n",
      "13  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128     214125.0            2230.0\n",
      "14  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128      53531.0             557.0\n",
      "15  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128      13382.0             139.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.670191+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total memory: 15.62 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.670931+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total Bytes of Raw Data: 0.024 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.671387+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Raw Data will use: 0.155 % of memory\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.682630+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: b-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.865448+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:52.876189+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: c-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.056094+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.065729+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: NVR08, run: b-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.266202+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.275765+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: NVR08, run: c-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.453083+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.454785+0000 | INFO | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | FC levels not present\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.458751+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | Processing config indicates 4 decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:53.460174+0000 | INFO | aurora.pipelines.transfer_function_kernel | valid_decimations | After validation there are 4 valid decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:53.869905+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-03T20:14:13+00:00 does not match metadata start 2020-06-02T22:24:55+00:00 updating metatdata value to 2020-06-03T20:14:13+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:54.289804+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-12T17:52:23+00:00 does not match metadata end 2020-06-14T16:56:02+00:00 updating metatdata value to 2020-06-12T17:52:23+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:54.729775+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-14T18:00:44+00:00 does not match metadata start 2020-06-12T18:32:17+00:00 updating metatdata value to 2020-06-14T18:00:44+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:54.730991+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-24T15:55:46+00:00 does not match metadata end 2020-07-01T17:32:59+00:00 updating metatdata value to 2020-06-24T15:55:46+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:55.212376+0000 | INFO | mth5.processing.kernel_dataset | initialize_dataframe_for_processing | Dataset dataframe initialized successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:55.214538+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 0 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:55.902202+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:56.495497+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:57.110854+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:57.789742+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:31:57.837392+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:57.849479+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:57.979618+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:58.182029+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:58.386106+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:58.676301+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:58.928559+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:59.259822+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:31:59.593929+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:00.008193+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:00.156832+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:00.361533+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:00.564940+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:00.855617+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:01.111017+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:01.427984+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:01.762831+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:02.164106+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:02.312593+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:02.519384+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:02.723934+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:03.014269+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:03.266912+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:03.582026+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:03.913854+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:04.982598+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 1\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:05.298542+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 1 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:05.642031+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:05.957231+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.251823+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.579569+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:06.592922+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.600257+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.664829+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.748901+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.852096+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:06.955297+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.068090+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.192384+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.279123+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.359438+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.462393+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.566934+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.684269+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.809250+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.893466+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:07.973372+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:08.077937+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:08.185792+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:08.300238+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:09.040834+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 2\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:09.162601+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 2 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:09.392252+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:09.652359+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:09.884550+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.148262+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:10.158159+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.165925+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.212904+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.259624+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.311606+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.376046+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.447331+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.526932+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.587698+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.642737+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.704023+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.771749+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.845794+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.925647+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:10.985431+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.047810+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.110121+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.175546+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.247573+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "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6aGHHrItB3HNNddoz549qlnT8b/J+vXrNXPmTH377beyWq2l1jFlyhRNnTpVkjRx4kQtWLDAdiwnJ0dms9m2PWbMGH344YeSHP9O/vGPf2jmzJkKDAzU+vXr1bJlS0lSu3btbK1XI0aM0Ny5c51+7wBQVeTl5SkqKkp169Z1edlenRw5o3v37mXeoErj7+9fottDkoKDg6tEcnRpF8t1113n8H6bNGli+7mgoKDMz6M0R48e1ciRI21JyeXUrFnTrZ9n48aNtW/fPknSgQMHVLduXae7RefOnWtLjCQpISHBFuuoUaNsydGvv/6qb7/9VgMHDnS4fsCAARowYIByc3O1ceNGbdq0ScuXL9eWLVts57z66quaPn26JNlmUxYzmUwOn8358+dtP4eFhSk4OFiHDx/WSy+9JKmom7RTp04O1xerVatWlfh3CwBXyh1DYrx6EciwsDCZzeYSU7Gzs7MVERFxVWUnJycrJiZGnTt3vqpyvM2FCxccti9tGbL/LAMCApxOjKSiKe72idGLL76o06dPyzCMUqfEu9Mf//hH28+nTp3Sp59+6vS1b7/9tsN2y5YtbYsq2re6SVJKSkqZ5YSEhKhfv35KSkpSWlqaw/itvLw822fdvn17h+t+/vlnh+0DBw7Yfi5u8czJydHFixclSZMmTXJY+PHQoUMO74XFIAHAtbw6OfLz81OnTp0cukysVqtSU1PVrVu3qyp77Nix2r17d4nBslXNu+++a/s5Ly9Pn3/+uW3bvjXCGSdPnnTYvv/++xUSEiJJtm6hikpJSXG48R88eNCp68aNG+fQNfXwww9r+/btJc4rLCzUm2++aUsSN23apB9//NHp+JYvX64TJ07YthMSEpSenl7quXXq1LH9XKNGDVtTb58+fRQQEGA7tmTJEtvPu3fv1u7du23bd955p9OxAQDcw+PdamfOnNH+/ftt2xkZGdq2bZtCQ0MVHR2txMREJSQkKC4uTl26dNGsWbOUn59vm72Gy/vrX/+qPXv2qGnTpvr4448dbvRjxoypUFmtWrVy2B4wYID69++vHTt26OOPP3ZJvM5q06aNpk2bpieffFJS0TiiuLg43X777erYsWOJRSDj4+MlyWHsj8lk0vDhw0s0yZ45c0ZffPGFpKLk6v3339eECRMkSe+8847eeecdtWjRQt27d9e1114rk8mk7du3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866q3KlTpyo3N9f2yszMdFHEAACgKqi05Oj06dMVOj8yMlIxMTEO+1q3bq3Dhw9LkiIiIiRJ2dnZDudkZ2fbjpXG399fwcHBDi8AAIBibkmOZsyYocWLF9u277rrLjVo0ECNGzfW9u3bnSrj5ptv1t69ex32/fTTT2ratKkkqXnz5oqIiFBqaqrteF5enjZt2qRu3bq54F0AAIDqyC3J0bx582xjeVavXq3Vq1drxYoV6t+/vyZPnuxUGY899pi+++47/fOf/9T+/fu1cOFCvf766xo7dqwkyWQyaeLEiXruuef02WefaefOnRo1apQaNWqkQYMGueNtAQCAaqCmOwrNysqyJUfLly/XXXfdpT59+qhZs2bq2rWrU2V07txZn3zyiaZOnapnn31WzZs316xZszRy5EjbOU888YTy8/P1v//7vzp9+rS6d++ulStXKiAgwB1vCwAAVANuWeeoUaNG+vjjj/WHP/xBrVq10nPPPafhw4dr79696ty5s1dNn2edIwAAfI87799uaTkaMmSIRowYoZYtW+rkyZPq37+/JOn777/Xdddd544qAQAAXMItydG///1vNWvWTJmZmZo5c6bq1KkjSTp27JgeeeQRd1QJAADgEl77+JDKQrcaAAC+xycfH/Luu++qe/fuatSokQ4dOiRJmjVrlj799FN3VQkAAHDV3JIczZ07V4mJierfv79Onz4ti8UiSapXr55mzZrljioBAABcwi3J0SuvvKI33nhDTz31lMxms21/XFycdu7c6Y4qAQAAXMItyVFGRoY6duxYYr+/v7/y8/PdUSUAAIBLuCU5at68ubZt21Zi/8qVK9W6dWt3VAkAAOASbpnKn5iYqLFjx+r8+fMyDEObN2/WokWLNH36dL355pvuqBIAAMAl3JIcPfTQQwoMDNRf//pXnT17ViNGjFCjRo308ssv65577nFHlQAAAC7h9nWOzp49qzNnzqhhw4burOaKsc4RAAC+xyfXObp48aL+85//6N1331VgYKAk6ejRozpz5oy7qgQAALhqbulWO3TokPr166fDhw+roKBAt912m+rWrasZM2aooKBA8+bNc0e1AAAAV80tLUcTJkxQXFycTp06ZWs1kqTBgwcrNTXVHVUCAAC4hFtajtavX6///ve/8vPzc9jfrFkzHTlyxB1VAgAAuIRbWo6sVqvtkSH2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scrKylKnTp30008/KSgoyNOhAQBczGKxqKCgQLVr11Z+fr7atm2rLVu2qEGDBk6X4fOLQALliYyMVGRkpCQpIiJCYWFhysnJITkCgCrIbDardu3akqSCggIZhqGKtgPRrQavt27dOt1xxx1q1KiRTCaTli1bVuKc5ORkNWvWTAEBAeratas2b95calnp6emyWCyKiopyc9QAgCvhiu/806dPq0OHDmrSpIkmT56ssLCwCsVAcgSvl5+frw4dOig5ObnU44sXL1ZiYqKSkpK0detWdejQQX379tXx48cdzsvJydGoUaP0+uuvV0bYAIAr4Irv/Hr16mn79u3KyMjQwoULlZ2dXaEYGHMEn2IymfTJJ59o0KBBtn1du3ZV586dNWfOHEmS1WpVVFSUxo8frylTpkgqalq97bbbNGbMGN13332eCB0AUEFX+p1v75FHHlHv3r01bNgwp+ul5Qg+7cKFC0pPT1d8fLxtX40aNRQfH6+NGzdKkgzD0OjRo9W7d28SIwDwYc5852dnZ+u3336TJOXm5mrdunVq1apVheohOYJPO3HihCwWi8LDwx32h4eHKysrS5K0YcMGLV68WMuWLVNsbKxiY2O1c+dOT4QLALgKznznHzp0SD169FCHDh3Uo0cPjR8/Xu3atatQPcxWQ5XXvXt3Wa1WT4cBAKgEXbp00bZt266qDFqO4NPCwsJkNptLDLbLzs5WRESEh6ICALhDZX3nkxzBp/n5+alTp05KTU217bNarUpNTVW3bt08GBkAwNUq6zufbjV4vTNnzmj//v227YyMDG3btk2hoaGKjo5WYmKiEhISFBcXpy5dumjWrFnKz8/X/fff78GoAQBXwhu+85nKD6+3du1a9erVq8T+hIQEpaSkSJLmzJmj559/XllZWYqNjdXs2bPVtWvXSo4UAHC1vOE7n+QIAADADmOOAAAA7JAcAQAA2CE5AgAAsENyBAAAYIfkCAAAwA7JEQAAgB2SIwAAADskRwAAAHZIjgAAAOyQHAHwSaNHj9agQYOuqoy1a9fKZDLp9OnTlz0vNTVVrVu3lsViKbfMlStXKjY2Vlar9apiA+A5JEcA3Gr06NEymUwymUzy8/PTddddp2effVYXL168qnJffvll23OW3O2JJ57QX//6V5nN5nLP7devn2rVqqX333+/EiID4A4kRwDcrl+/fjp27Jj27dunSZMm6emnn9bzzz9/RWVZLBZZrVaFhISoXr16rg20FN9++60OHDigoUOHOn3N6NGjNXv2bDdGBcCdSI4AuJ2/v78iIiLUtGlTPfzww4qPj9dnn30mSSooKNDjjz+uxo0bKygoSF27dtXatWtt16akpKhevXr67LPPFBMTI39/fx0+fLhEt1pBQYEeffRRNWzYUAEBAerevbvS0tIc4vjyyy91/fXXKzAwUL169dLBgwfLjf2DDz7QbbfdpoCAANu+7du3q1evXqpbt66Cg4PVqVMnbdmyxXb8jjvu0JYtW3TgwIEr+8AAeBTJEYBKFxgYqAsXLkiSxo0bp40bN+qDDz7Qjh07NHz4cPXr10/79u2znX/27FnNmDFDb775pnbt2qWGDRuWKPOJJ57QkiVL9Pbbb2vr1q267rrr1LdvX+Xk5EiSMjMzNWTIEN1xxx3atm2bHnroIU2ZMqXcWNevX6+4uDiHfSNHjlSTJk2Ulpam9PR0TZkyRbVq1bIdj46OVnh4uNavX39Fnw8Az6rp6QAAVB+GYSg1NVVfffWVxo8fr8OHD2vBggU6fPiwGjVqJEl6/PHHtXLlSi1YsED//Oc/JUmFhYV69dVX1aFDh1LLzc/P19y5c5WSkqL+/ftLkt544w2tXr1ab731liZPnqy5c+eqRYsWevHFFyVJrVq10s6dOzVjxozLxnzo0CFbbMUOHz6syZMn64YbbpAktWzZssR1jRo10qFDhyrw6QDwFiRHANxu+fLlqlOnjgoLC2W1WjVixAg9/fTTWrt2rSwWi66//nqH8wsKCtSgQQPbtp+fn9q3b19m+QcOHFBhYaFuvvlm275atWqpS5cu+vHHHyVJP/74o7p27epwXbdu3cqN/dy5cw5dapKUmJiohx56SO+++67i4+M1fPhwtWjRwuGcwMBAnT17ttzyAXgfkiMAbterVy/NnTtXfn5+atSokWrWLPrqOXPmjMxms9LT00vMBKtTp47t58DAQJlMpkqNuVhYWJhOnTrlsO/pp5/WiBEj9MUXX2jFihVKSkrSBx98oMGDB9vOycnJ0TXXXFPZ4QJwAcYcAXC7oKAgXXfddYqOjrYlRpLUsWNHWSwWHT9+XNddd53DKyIiwunyW7RoIT8/P23YsMG2r7CwUGlpaYqJiZEktW7dWps3b3a47rvvviu37I4dO2r37t0l9l9//fV67LHHtGrVKg0ZMkQLFiywHTt//rwOHDigjh07Ov0eAHgPkiMAHnP99ddr5MiRGjVqlJYuXaqMjAxt3rxZ06dP1xdffOF0OUFBQXr44Yc1efJkrVy5Urt379aYMWN09uxZPfjgg5KkP//5z9q3b58mT56svXv3auHChU6tk9S3b199++23tu1z585p3LhxWrt2rQ4dOqQNGzYoLS1NrVu3tp3z3Xffyd/f36luOwDeh+QIgEctWLBAo0aN0qRJk9SqVSsNGjRIaWlpio6OrlA5//rXvzR06FDdd999uvHGG7V//3599dVXql+/vqSiGWRLlizRsmXL1KFDB82bN8824PtyRo4cqV27dmnv3r2SJLPZrJMnT2rUqFG6/vrrddddd6l///565plnbNcsWrRII0eOVO3atSv0HgB4B5NhGIangwAAbzZ58mTl5eXptddeK/fcEydOqFWrVtqyZYuaN29eCdEBcDVajgCgHE899ZSaNm3q1PPSDh48qFdffZXECPBhtBwBAADYoeUIAADADskRAACAHZIjAAAAOyRHAAAAdkiOAAAA7JAcAQAA2CE5AgAAsENyBAAAYIfkCAAAwM7/BzchG7fqGr/YAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.872234+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 3\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:11.936964+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 3 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.164986+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.419024+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.659627+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.926773+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:12.937698+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.946471+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:12.994103+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.041715+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.087905+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.133890+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.181173+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.225438+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.270854+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.317291+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.362984+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.410578+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.455628+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.500790+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.546803+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:13.593182+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:14.194920+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | type(tf_cls): <class 'mt_metadata.transfer_functions.core.TF'>\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:14.280894+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | Transfer function object written to CAS04_RRNVR08.zrr\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:14.459403+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:14.634873+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "show_plot = True\n",
    "z_file_path = pathlib.Path(f\"{tf_file_base}.zrr\")\n",
    "tf_cls = process_mth5(config,\n",
    "                    kernel_dataset,\n",
    "                    units=\"MT\",\n",
    "                    show_plot=show_plot,\n",
    "                    z_file_path=z_file_path,\n",
    "                )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "2ee6e117-c7e1-40ba-9981-5f2a189e404a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:14.640208Z",
     "iopub.status.busy": "2025-08-03T00:32:14.640048Z",
     "iopub.status.idle": "2025-08-03T00:32:14.821643Z",
     "shell.execute_reply": "2025-08-03T00:32:14.821056Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MT( station='0', latitude=0.00, longitude=0.00, elevation=0.00 )"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tf_cls.write(fn=f\"{tf_file_base}.xml\", file_type=\"emtfxml\")\n",
    "tf_cls.write(fn=f\"{tf_file_base}.edi\", file_type=\"edi\")\n",
    "tf_cls.write(fn=f\"{tf_file_base}.zrr\", file_type=\"zrr\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "763704e0-ceed-43be-ad70-82e7709d7758",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:14.823531Z",
     "iopub.status.busy": "2025-08-03T00:32:14.823382Z",
     "iopub.status.idle": "2025-08-03T00:32:14.826501Z",
     "shell.execute_reply": "2025-08-03T00:32:14.825995Z"
    }
   },
   "outputs": [],
   "source": [
    "archived_z_file = pathlib.Path(f\"CAS04bcd_REV06.zrr\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e711cde6-6e35-4335-a1ef-e022f6af7839",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:14.828636Z",
     "iopub.status.busy": "2025-08-03T00:32:14.828258Z",
     "iopub.status.idle": "2025-08-03T00:32:14.832931Z",
     "shell.execute_reply": "2025-08-03T00:32:14.832415Z"
    }
   },
   "outputs": [],
   "source": [
    "from aurora.transfer_function.plot.comparison_plots import compare_two_z_files\n",
    "z_file_path = \"CAS04_RRNVR08.zrr\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "500c63da-86c7-42bc-948f-561473982c2f",
   "metadata": {},
   "source": [
    "#  To compare with the archived file, we need to set the coordinate system to geographic\n",
    "\n",
    "The TF will be output with a header like this:\n",
    "\n",
    "```\n",
    "TRANSFER FUNCTIONS IN MEASUREMENT COORDINATES\n",
    "********* WITH FULL ERROR COVARIANCE ********\n",
    "Aurora Robust Remote Reference\n",
    "station: CAS04\n",
    "coordinate    37.633  -121.468 declination    13.17\n",
    "number of channels    5  number of frequencies  25\n",
    " orientations and tilts of each channel\n",
    "    1    13.20     0.00 CAS04  Hx\n",
    "    2   103.20     0.00 CAS04  Hy\n",
    "    3     0.00    90.00 CAS04  Hz\n",
    "    4    13.20     0.00 CAS04  Ex\n",
    "    5   103.20     0.00 CAS04  Ey\n",
    "```\n",
    "\n",
    "To remove the rotation, we can use a variety of tools, but another way is just to overwrite the orientations:\n",
    "\n",
    "```\n",
    "TRANSFER FUNCTIONS IN MEASUREMENT COORDINATES\n",
    "********* WITH FULL ERROR COVARIANCE ********\n",
    " Aurora Robust Remote Reference\n",
    "station: CAS04\n",
    "coordinate    37.633  -121.468 declination    13.17\n",
    "number of channels    5  number of frequencies  25\n",
    " orientations and tilts of each channel\n",
    "    1     0.00     0.00 CAS04  Hx\n",
    "    2    90.00     0.00 CAS04  Hy\n",
    "    3     0.00    90.00 CAS04  Hz\n",
    "    4     0.00     0.00 CAS04  Ex\n",
    "    5    90.00     0.00 CAS04  Ey\n",
    "```\n",
    "\n",
    "This is why we set angle1=13.2 degrees in the comparison plotter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f5901d39-cacc-4c3f-9a1b-fd2fb33458e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:14.835074Z",
     "iopub.status.busy": "2025-08-03T00:32:14.834705Z",
     "iopub.status.idle": "2025-08-03T00:32:14.838095Z",
     "shell.execute_reply": "2025-08-03T00:32:14.837563Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CAS04_RRNVR08.zrr\n",
      "CAS04bcd_REV06.zrr\n",
      "CAS04_RRNVR08\n"
     ]
    }
   ],
   "source": [
    "print(z_file_path)\n",
    "print(archived_z_file)\n",
    "print(tf_file_base)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "e3a85530-c001-45b3-a550-1f57548deb1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:14.839805Z",
     "iopub.status.busy": "2025-08-03T00:32:14.839669Z",
     "iopub.status.idle": "2025-08-03T00:32:16.254432Z",
     "shell.execute_reply": "2025-08-03T00:32:16.253781Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:14.844689+0000 | INFO | aurora.transfer_function.plot.comparison_plots | compare_two_z_files | Scaling TF scale_factor1: 1\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1920x1440 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare_two_z_files(\n",
    "    z_file_path,\n",
    "    archived_z_file,\n",
    "    angle1=+13.2,\n",
    "    label1=\"aurora\",\n",
    "    label2=\"emtf\",\n",
    "    scale_factor1=1,\n",
    "    out_file=f\"{tf_file_base}compare.png\",\n",
    "    markersize=3,\n",
    "    rho_ylims=[1e0, 1e3],\n",
    "    xlims=[0.99, 2000],\n",
    "    rho_ax_label_size=12,\n",
    "    phi_ax_label_size=12\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dca59e0a-69cf-453c-8c8b-461750c25deb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5fe72445-8acd-4fb0-8df6-6cce87b068f5",
   "metadata": {},
   "source": [
    "# Part II: Logic to save FCs\n",
    "\n",
    "Storage of FCs was intended to be an option to provide to users on the fly, by setting the decimation_level\n",
    "part of the processing config to `dec_level.save_fcs = True` and `dec_level.save_fcs_type = \"h5\"`.\n",
    "\n",
    "This works in some cases but not in general.  Details are in aurora issue #319 https://github.com/simpeg/aurora/issues/319.  \n",
    "\n",
    "The proposed solution is to generate FCs per station by processing as a single station.\n",
    "\n",
    "We start with the Run Summary table:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "729d27e8-61c3-4946-817b-fbee4217eb0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.256722Z",
     "iopub.status.busy": "2025-08-03T00:32:16.256394Z",
     "iopub.status.idle": "2025-08-03T00:32:16.468259Z",
     "shell.execute_reply": "2025-08-03T00:32:16.467632Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.449558+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>channel_scale_factors</th>\n",
       "      <th>duration</th>\n",
       "      <th>end</th>\n",
       "      <th>has_data</th>\n",
       "      <th>input_channels</th>\n",
       "      <th>mth5_path</th>\n",
       "      <th>n_samples</th>\n",
       "      <th>output_channels</th>\n",
       "      <th>run</th>\n",
       "      <th>sample_rate</th>\n",
       "      <th>start</th>\n",
       "      <th>station</th>\n",
       "      <th>survey</th>\n",
       "      <th>run_hdf5_reference</th>\n",
       "      <th>station_hdf5_reference</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>11266.0</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>11267</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>a</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>847648.0</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>847649</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>1638042.0</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>1638043</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>c</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>1034585.0</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>1034586</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>d</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>2860.0</td>\n",
       "      <td>2020-06-03 19:57:51+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>2861</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>a</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-03 19:10:11+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>938509.0</td>\n",
       "      <td>2020-06-14 16:56:02+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>938510</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>b</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-03 20:14:13+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>{'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...</td>\n",
       "      <td>856502.0</td>\n",
       "      <td>2020-06-24 15:55:46+00:00</td>\n",
       "      <td>True</td>\n",
       "      <td>[hx, hy]</td>\n",
       "      <td>8P_CAS04_NVR08.h5</td>\n",
       "      <td>856503</td>\n",
       "      <td>[ex, ey, hz]</td>\n",
       "      <td>c</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2020-06-14 18:00:44+00:00</td>\n",
       "      <td>NVR08</td>\n",
       "      <td>CONUS South</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "      <td>&lt;HDF5 object reference&gt;</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               channel_scale_factors   duration  \\\n",
       "0  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...    11266.0   \n",
       "1  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   847648.0   \n",
       "2  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...  1638042.0   \n",
       "3  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...  1034585.0   \n",
       "4  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...     2860.0   \n",
       "5  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   938509.0   \n",
       "6  {'ex': 1.0, 'ey': 1.0, 'hx': 1.0, 'hy': 1.0, '...   856502.0   \n",
       "\n",
       "                        end  has_data input_channels          mth5_path  \\\n",
       "0 2020-06-02 22:07:46+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "1 2020-06-12 17:52:23+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "2 2020-07-01 17:32:59+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "3 2020-07-13 19:00:00+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "4 2020-06-03 19:57:51+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "5 2020-06-14 16:56:02+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "6 2020-06-24 15:55:46+00:00      True       [hx, hy]  8P_CAS04_NVR08.h5   \n",
       "\n",
       "   n_samples output_channels run  sample_rate                     start  \\\n",
       "0      11267    [ex, ey, hz]   a          1.0 2020-06-02 19:00:00+00:00   \n",
       "1     847649    [ex, ey, hz]   b          1.0 2020-06-02 22:24:55+00:00   \n",
       "2    1638043    [ex, ey, hz]   c          1.0 2020-06-12 18:32:17+00:00   \n",
       "3    1034586    [ex, ey, hz]   d          1.0 2020-07-01 19:36:55+00:00   \n",
       "4       2861    [ex, ey, hz]   a          1.0 2020-06-03 19:10:11+00:00   \n",
       "5     938510    [ex, ey, hz]   b          1.0 2020-06-03 20:14:13+00:00   \n",
       "6     856503    [ex, ey, hz]   c          1.0 2020-06-14 18:00:44+00:00   \n",
       "\n",
       "  station       survey       run_hdf5_reference   station_hdf5_reference  \n",
       "0   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "1   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "2   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "3   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "4   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "5   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  \n",
       "6   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mth5_run_summary = RunSummary()\n",
    "mth5_run_summary.from_mth5s([mth5_path,])\n",
    "run_summary = mth5_run_summary.clone()\n",
    "run_summary.df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f4d6ad0-e6a4-428f-a4c4-840ac448ac72",
   "metadata": {},
   "source": [
    "### But this time, process stations individually (e.g. CAS04 as below)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dae34d63-e84a-4825-9535-a5e8eac48392",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.470630Z",
     "iopub.status.busy": "2025-08-03T00:32:16.470116Z",
     "iopub.status.idle": "2025-08-03T00:32:16.487658Z",
     "shell.execute_reply": "2025-08-03T00:32:16.487176Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.474032+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column fc, adding and setting dtype to <class 'pandas._libs.missing.NAType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.475079+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column remote, adding and setting dtype to <class 'bool'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.475950+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column run_dataarray, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.476810+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column stft, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.477584+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column mth5_obj, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>survey</th>\n",
       "      <th>station</th>\n",
       "      <th>run</th>\n",
       "      <th>start</th>\n",
       "      <th>end</th>\n",
       "      <th>duration</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>a</td>\n",
       "      <td>2020-06-02 19:00:00+00:00</td>\n",
       "      <td>2020-06-02 22:07:46+00:00</td>\n",
       "      <td>11266.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>b</td>\n",
       "      <td>2020-06-02 22:24:55+00:00</td>\n",
       "      <td>2020-06-12 17:52:23+00:00</td>\n",
       "      <td>847648.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>c</td>\n",
       "      <td>2020-06-12 18:32:17+00:00</td>\n",
       "      <td>2020-07-01 17:32:59+00:00</td>\n",
       "      <td>1638042.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CONUS South</td>\n",
       "      <td>CAS04</td>\n",
       "      <td>d</td>\n",
       "      <td>2020-07-01 19:36:55+00:00</td>\n",
       "      <td>2020-07-13 19:00:00+00:00</td>\n",
       "      <td>1034585.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        survey station run                     start  \\\n",
       "0  CONUS South   CAS04   a 2020-06-02 19:00:00+00:00   \n",
       "1  CONUS South   CAS04   b 2020-06-02 22:24:55+00:00   \n",
       "2  CONUS South   CAS04   c 2020-06-12 18:32:17+00:00   \n",
       "3  CONUS South   CAS04   d 2020-07-01 19:36:55+00:00   \n",
       "\n",
       "                        end   duration  \n",
       "0 2020-06-02 22:07:46+00:00    11266.0  \n",
       "1 2020-06-12 17:52:23+00:00   847648.0  \n",
       "2 2020-07-01 17:32:59+00:00  1638042.0  \n",
       "3 2020-07-13 19:00:00+00:00  1034585.0  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kernel_dataset = KernelDataset()\n",
    "station_id = \"CAS04\"\n",
    "remote_reference_id = None\n",
    "kernel_dataset.from_run_summary(run_summary, station_id, remote_reference_id)\n",
    "kernel_dataset.mini_summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9c5c2fc-04d7-4a35-916d-3532b51249b2",
   "metadata": {},
   "source": [
    "Before adding the FCs, take a look at the file stats:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4ab4bbd5-ec58-4f69-8eff-1e10918f7098",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.489578Z",
     "iopub.status.busy": "2025-08-03T00:32:16.489435Z",
     "iopub.status.idle": "2025-08-03T00:32:16.493314Z",
     "shell.execute_reply": "2025-08-03T00:32:16.492610Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file_info: \n",
      " os.stat_result(st_mode=33188, st_ino=836435, st_dev=2065, st_nlink=1, st_uid=1001, st_gid=118, st_size=107290636, st_atime=1754181136, st_mtime=1754181136, st_ctime=1754181136)\n",
      "file_size_before_fc_addition 107290636\n"
     ]
    }
   ],
   "source": [
    "file_info = os.stat(mth5_path)\n",
    "print(f\"file_info: \\n {file_info}\")\n",
    "\n",
    "file_size_before_fc_addition = file_info.st_size\n",
    "print(f\"file_size_before_fc_addition {file_size_before_fc_addition}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "499693a7-e57b-4244-9e13-5da2f7fed74c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.495457Z",
     "iopub.status.busy": "2025-08-03T00:32:16.494925Z",
     "iopub.status.idle": "2025-08-03T00:32:16.518691Z",
     "shell.execute_reply": "2025-08-03T00:32:16.518179Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.501958+0000 | INFO | aurora.config.config_creator | determine_band_specification_style | Bands not defined; setting to EMTF BANDS_DEFAULT_FILE\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "cc = ConfigCreator()\n",
    "config = cc.create_from_kernel_dataset(kernel_dataset,) \n",
    "for dec_level in config.decimations:\n",
    "    dec_level.stft.window.type = \"hamming\"\n",
    "#    dec_level.stft.window.overlap = int(dec_level.stft.window.num_samples/4)\n",
    "    dec_level.save_fcs = True\n",
    "    dec_level.save_fcs_type = \"h5\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "74c00db4-68b7-4964-9395-48fe508d079f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.520689Z",
     "iopub.status.busy": "2025-08-03T00:32:16.520543Z",
     "iopub.status.idle": "2025-08-03T00:32:16.530888Z",
     "shell.execute_reply": "2025-08-03T00:32:16.530289Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{\n",
       "    \"processing\": {\n",
       "        \"band_setup_file\": \"/home/runner/work/aurora/aurora/aurora/config/emtf_band_setup/bs_test.cfg\",\n",
       "        \"band_specification_style\": \"EMTF\",\n",
       "        \"channel_nomenclature.ex\": \"ex\",\n",
       "        \"channel_nomenclature.ey\": \"ey\",\n",
       "        \"channel_nomenclature.hx\": \"hx\",\n",
       "        \"channel_nomenclature.hy\": \"hy\",\n",
       "        \"channel_nomenclature.hz\": \"hz\",\n",
       "        \"decimations\": [\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.23828125,\n",
       "                                \"frequency_min\": 0.19140625,\n",
       "                                \"index_max\": 30,\n",
       "                                \"index_min\": 25\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.19140625,\n",
       "                                \"frequency_min\": 0.15234375,\n",
       "                                \"index_max\": 24,\n",
       "                                \"index_min\": 20\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.15234375,\n",
       "                                \"frequency_min\": 0.12109375,\n",
       "                                \"index_max\": 19,\n",
       "                                \"index_min\": 16\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.12109375,\n",
       "                                \"frequency_min\": 0.09765625,\n",
       "                                \"index_max\": 15,\n",
       "                                \"index_min\": 13\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.09765625,\n",
       "                                \"frequency_min\": 0.07421875,\n",
       "                                \"index_max\": 12,\n",
       "                                \"index_min\": 10\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.07421875,\n",
       "                                \"frequency_min\": 0.05859375,\n",
       "                                \"index_max\": 9,\n",
       "                                \"index_min\": 8\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.05859375,\n",
       "                                \"frequency_min\": 0.04296875,\n",
       "                                \"index_max\": 7,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 0,\n",
       "                                \"frequency_max\": 0.04296875,\n",
       "                                \"frequency_min\": 0.03515625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 1.0,\n",
       "                    \"decimation.level\": 0,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 1.0,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": true,\n",
       "                    \"save_fcs_type\": \"h5\",\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"hamming\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0341796875,\n",
       "                                \"frequency_min\": 0.0263671875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0263671875,\n",
       "                                \"frequency_min\": 0.0205078125,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 11\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0205078125,\n",
       "                                \"frequency_min\": 0.0166015625,\n",
       "                                \"index_max\": 10,\n",
       "                                \"index_min\": 9\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0166015625,\n",
       "                                \"frequency_min\": 0.0126953125,\n",
       "                                \"index_max\": 8,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0126953125,\n",
       "                                \"frequency_min\": 0.0107421875,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 1,\n",
       "                                \"frequency_max\": 0.0107421875,\n",
       "                                \"frequency_min\": 0.0087890625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 1,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.25,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": true,\n",
       "                    \"save_fcs_type\": \"h5\",\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"hamming\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.008544921875,\n",
       "                                \"frequency_min\": 0.006591796875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.006591796875,\n",
       "                                \"frequency_min\": 0.005126953125,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 11\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.005126953125,\n",
       "                                \"frequency_min\": 0.004150390625,\n",
       "                                \"index_max\": 10,\n",
       "                                \"index_min\": 9\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.004150390625,\n",
       "                                \"frequency_min\": 0.003173828125,\n",
       "                                \"index_max\": 8,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.003173828125,\n",
       "                                \"frequency_min\": 0.002685546875,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 6\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 2,\n",
       "                                \"frequency_max\": 0.002685546875,\n",
       "                                \"frequency_min\": 0.002197265625,\n",
       "                                \"index_max\": 5,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 2,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.0625,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": true,\n",
       "                    \"save_fcs_type\": \"h5\",\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"hamming\"\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"decimation_level\": {\n",
       "                    \"bands\": [\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00274658203125,\n",
       "                                \"frequency_min\": 0.00213623046875,\n",
       "                                \"index_max\": 22,\n",
       "                                \"index_min\": 18\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00213623046875,\n",
       "                                \"frequency_min\": 0.00164794921875,\n",
       "                                \"index_max\": 17,\n",
       "                                \"index_min\": 14\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00164794921875,\n",
       "                                \"frequency_min\": 0.00115966796875,\n",
       "                                \"index_max\": 13,\n",
       "                                \"index_min\": 10\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00115966796875,\n",
       "                                \"frequency_min\": 0.00079345703125,\n",
       "                                \"index_max\": 9,\n",
       "                                \"index_min\": 7\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"band\": {\n",
       "                                \"center_averaging_type\": \"geometric\",\n",
       "                                \"closed\": \"left\",\n",
       "                                \"decimation_level\": 3,\n",
       "                                \"frequency_max\": 0.00079345703125,\n",
       "                                \"frequency_min\": 0.00054931640625,\n",
       "                                \"index_max\": 6,\n",
       "                                \"index_min\": 5\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"channel_weight_specs\": [],\n",
       "                    \"decimation.anti_alias_filter\": \"default\",\n",
       "                    \"decimation.factor\": 4.0,\n",
       "                    \"decimation.level\": 3,\n",
       "                    \"decimation.method\": \"default\",\n",
       "                    \"decimation.sample_rate\": 0.015625,\n",
       "                    \"estimator.engine\": \"RME_RR\",\n",
       "                    \"estimator.estimate_per_channel\": true,\n",
       "                    \"input_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        \"ex\",\n",
       "                        \"ey\",\n",
       "                        \"hz\"\n",
       "                    ],\n",
       "                    \"reference_channels\": [\n",
       "                        \"hx\",\n",
       "                        \"hy\"\n",
       "                    ],\n",
       "                    \"regression.max_iterations\": 10,\n",
       "                    \"regression.max_redescending_iterations\": 2,\n",
       "                    \"regression.minimum_cycles\": 10,\n",
       "                    \"regression.r0\": 1.5,\n",
       "                    \"regression.tolerance\": 0.005,\n",
       "                    \"regression.u0\": 2.8,\n",
       "                    \"regression.verbosity\": 0,\n",
       "                    \"save_fcs\": true,\n",
       "                    \"save_fcs_type\": \"h5\",\n",
       "                    \"stft.harmonic_indices\": [\n",
       "                        -1\n",
       "                    ],\n",
       "                    \"stft.method\": \"fft\",\n",
       "                    \"stft.min_num_stft_windows\": 2,\n",
       "                    \"stft.per_window_detrend_type\": \"linear\",\n",
       "                    \"stft.pre_fft_detrend_type\": \"linear\",\n",
       "                    \"stft.prewhitening_type\": \"first difference\",\n",
       "                    \"stft.recoloring\": true,\n",
       "                    \"stft.window.clock_zero_type\": \"ignore\",\n",
       "                    \"stft.window.normalized\": true,\n",
       "                    \"stft.window.num_samples\": 128,\n",
       "                    \"stft.window.overlap\": 32,\n",
       "                    \"stft.window.type\": \"hamming\"\n",
       "                }\n",
       "            }\n",
       "        ],\n",
       "        \"id\": \"CAS04_sr1\",\n",
       "        \"stations.local.id\": \"CAS04\",\n",
       "        \"stations.local.mth5_path\": \"8P_CAS04_NVR08.h5\",\n",
       "        \"stations.local.remote\": false,\n",
       "        \"stations.local.runs\": [\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"a\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-06-02T22:07:46+00:00\",\n",
       "                                \"start\": \"2020-06-02T19:00:00+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"b\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-06-12T17:52:23+00:00\",\n",
       "                                \"start\": \"2020-06-02T22:24:55+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"c\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-07-01T17:32:59+00:00\",\n",
       "                                \"start\": \"2020-06-12T18:32:17+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            },\n",
       "            {\n",
       "                \"run\": {\n",
       "                    \"id\": \"d\",\n",
       "                    \"input_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hx\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hy\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"output_channels\": [\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ex\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"ey\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        },\n",
       "                        {\n",
       "                            \"channel\": {\n",
       "                                \"id\": \"hz\",\n",
       "                                \"scale_factor\": 1.0\n",
       "                            }\n",
       "                        }\n",
       "                    ],\n",
       "                    \"sample_rate\": 1.0,\n",
       "                    \"time_periods\": [\n",
       "                        {\n",
       "                            \"time_period\": {\n",
       "                                \"end\": \"2020-07-13T19:00:00+00:00\",\n",
       "                                \"start\": \"2020-07-01T19:36:55+00:00\"\n",
       "                            }\n",
       "                        }\n",
       "                    ]\n",
       "                }\n",
       "            }\n",
       "        ],\n",
       "        \"stations.remote\": []\n",
       "    }\n",
       "}"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "117661a7-9918-4dca-9cc5-b142fa906417",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.532998Z",
     "iopub.status.busy": "2025-08-03T00:32:16.532654Z",
     "iopub.status.idle": "2025-08-03T00:32:16.535822Z",
     "shell.execute_reply": "2025-08-03T00:32:16.535231Z"
    }
   },
   "outputs": [],
   "source": [
    "tf_file_base = f\"{station_id}_SS\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ef23917a-6db4-4c11-896d-2457f36c0b24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:16.537718Z",
     "iopub.status.busy": "2025-08-03T00:32:16.537574Z",
     "iopub.status.idle": "2025-08-03T00:32:44.093011Z",
     "shell.execute_reply": "2025-08-03T00:32:44.092047Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.565769+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | Processing Summary Dataframe:\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.572941+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | \n",
      "     duration  has_data  n_samples run station       survey       run_hdf5_reference   station_hdf5_reference    fc  remote  stft mth5_obj dec_level  dec_factor  sample_rate  window_duration  num_samples_window  num_samples  num_stft_windows\n",
      "0     11266.0      True      11267   a   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128      11266.0             117.0\n",
      "1     11266.0      True      11267   a   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128       2816.0              29.0\n",
      "2     11266.0      True      11267   a   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128        704.0               7.0\n",
      "3     11266.0      True      11267   a   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128        176.0               1.0\n",
      "4    847648.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     847648.0            8829.0\n",
      "5    847648.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     211912.0            2207.0\n",
      "6    847648.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      52978.0             551.0\n",
      "7    847648.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      13244.0             137.0\n",
      "8   1638042.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128    1638042.0           17062.0\n",
      "9   1638042.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     409510.0            4265.0\n",
      "10  1638042.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128     102377.0            1066.0\n",
      "11  1638042.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      25594.0             266.0\n",
      "12  1034585.0      True    1034586   d   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128    1034585.0           10776.0\n",
      "13  1034585.0      True    1034586   d   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     258646.0            2693.0\n",
      "14  1034585.0      True    1034586   d   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      64661.0             673.0\n",
      "15  1034585.0      True    1034586   d   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      16165.0             168.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.573728+0000 | INFO | aurora.pipelines.transfer_function_kernel | validate_processing | No RR station specified, switching RME_RR to RME\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.574263+0000 | INFO | aurora.pipelines.transfer_function_kernel | validate_processing | No RR station specified, switching RME_RR to RME\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.574786+0000 | INFO | aurora.pipelines.transfer_function_kernel | validate_processing | No RR station specified, switching RME_RR to RME\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.575293+0000 | INFO | aurora.pipelines.transfer_function_kernel | validate_processing | No RR station specified, switching RME_RR to RME\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.577204+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total memory: 15.62 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.577953+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total Bytes of Raw Data: 0.026 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.578412+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Raw Data will use: 0.168 % of memory\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.591526+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: a-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.773010+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.783972+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: b-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.971574+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:16.982186+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: c-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.161589+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.171853+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: CAS04, run: d-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.347876+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.349943+0000 | INFO | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | FC levels not present\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.352978+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | Processing config indicates 4 decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:17.354594+0000 | INFO | aurora.pipelines.transfer_function_kernel | valid_decimations | After validation there are 4 valid decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:19.066721+0000 | INFO | mth5.processing.kernel_dataset | initialize_dataframe_for_processing | Dataset dataframe initialized successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:19.067681+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 0 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:19.283030+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:20.097031+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:21.407037+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:22.294827+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:22.450177+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:22.458712+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:22.615928+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:22.951209+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:23.240885+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:23.707890+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:24.157761+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:24.761540+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:25.344215+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:26.035315+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:26.210884+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:26.534620+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:26.821536+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:27.264736+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:27.704167+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:28.308590+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:28.913414+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:29.583449+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:29.759633+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:30.085669+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:30.373634+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:30.818742+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:31.264979+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:31.868263+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:32.460099+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:33.740410+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 1\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:34.081259+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 1 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:34.269107+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:34.645252+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:35.254054+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:35.676202+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:35.771850+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:35.779359+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:35.840530+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:35.923919+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.046223+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.163308+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.321598+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.489411+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.571657+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.657357+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.778449+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:36.891530+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.044883+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.206154+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.288806+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.373841+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.496276+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.611477+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:37.765086+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:38.600449+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 2\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:38.720632+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 2 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:38.911107+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:39.213987+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:39.544257+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:39.866539+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:39.946080+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:39.953698+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:39.991311+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.038086+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.097203+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.154626+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.226594+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.309728+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.355856+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.400998+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.459453+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.515785+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.588165+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.672231+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.718607+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.764489+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.822786+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.879125+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:40.949792+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:41.591790+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 3\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:41.650744+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 3 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:41.894526+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.186959+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.474733+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Saving FC level\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:42.549571+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.556834+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.589493+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.626983+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.663983+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.713358+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.764457+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.807530+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.852957+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.897455+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:42.947023+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.005955+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.051064+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.098234+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.138423+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.186497+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.813921+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | type(tf_cls): <class 'mt_metadata.transfer_functions.core.TF'>\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:43.905822+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | Transfer function object written to CAS04_SS.zrr\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.089736+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "show_plot = True\n",
    "z_file_path = pathlib.Path(f\"{tf_file_base}.zrr\")\n",
    "tf_cls = process_mth5(config,\n",
    "                    kernel_dataset,\n",
    "                    units=\"MT\",\n",
    "                    show_plot=show_plot,\n",
    "                    z_file_path=z_file_path,\n",
    "                )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "1850608a-c590-4830-96ef-8aca2b6af74e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.098083Z",
     "iopub.status.busy": "2025-08-03T00:32:44.097868Z",
     "iopub.status.idle": "2025-08-03T00:32:44.102519Z",
     "shell.execute_reply": "2025-08-03T00:32:44.101854Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "file_info: \n",
      " os.stat_result(st_mode=33188, st_ino=836435, st_dev=2065, st_nlink=1, st_uid=1001, st_gid=118, st_size=358561652, st_atime=1754181164, st_mtime=1754181164, st_ctime=1754181164)\n",
      "file_size_before_fc_addition 107290636\n",
      "file_size_after_fc_addition 358561652\n"
     ]
    }
   ],
   "source": [
    "file_info = os.stat(mth5_path)\n",
    "print(f\"file_info: \\n {file_info}\")\n",
    "\n",
    "file_size_after_fc_addition = file_info.st_size\n",
    "print(f\"file_size_before_fc_addition {file_size_before_fc_addition}\")\n",
    "print(f\"file_size_after_fc_addition {file_size_after_fc_addition}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ef36ce2-af8e-4b08-8aa8-6f846b6e20c1",
   "metadata": {},
   "source": [
    "# Now that the FCs are saved we can access them:|\n",
    "- These plats are intended to be put in spectrogram class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f1724874-6cea-4e57-b0da-efe5c06f7822",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.105019Z",
     "iopub.status.busy": "2025-08-03T00:32:44.104854Z",
     "iopub.status.idle": "2025-08-03T00:32:44.118164Z",
     "shell.execute_reply": "2025-08-03T00:32:44.117217Z"
    }
   },
   "outputs": [],
   "source": [
    "# Choose what specific FCs we want:\n",
    "# survey_id = \"CONUS SoCal\"  # declared directly from dataframe to avoid spurious name changes in archived metadata\n",
    "station_id = \"CAS04\"\n",
    "run_id = \"b\"\n",
    "decimation_level_id = \"0\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1d55fe89-8e04-44a2-981f-0dbec4fb018d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.123252Z",
     "iopub.status.busy": "2025-08-03T00:32:44.122549Z",
     "iopub.status.idle": "2025-08-03T00:32:44.128828Z",
     "shell.execute_reply": "2025-08-03T00:32:44.128186Z"
    }
   },
   "outputs": [],
   "source": [
    "m = initialize_mth5(mth5_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "92d4609f-36dc-485a-bd42-323b1090c5c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.131803Z",
     "iopub.status.busy": "2025-08-03T00:32:44.131414Z",
     "iopub.status.idle": "2025-08-03T00:32:44.138480Z",
     "shell.execute_reply": "2025-08-03T00:32:44.137845Z"
    }
   },
   "outputs": [],
   "source": [
    "survey_group = m.get_survey(survey_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "b73e4690-382c-4f47-bdc7-79233a49a5b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.140780Z",
     "iopub.status.busy": "2025-08-03T00:32:44.140394Z",
     "iopub.status.idle": "2025-08-03T00:32:44.150567Z",
     "shell.execute_reply": "2025-08-03T00:32:44.149918Z"
    }
   },
   "outputs": [],
   "source": [
    "station_obj = survey_group.stations_group.get_station(station_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5a945256-e717-4727-af7f-c0c852533af7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.152602Z",
     "iopub.status.busy": "2025-08-03T00:32:44.152438Z",
     "iopub.status.idle": "2025-08-03T00:32:44.205854Z",
     "shell.execute_reply": "2025-08-03T00:32:44.205326Z"
    }
   },
   "outputs": [],
   "source": [
    "fc_group = station_obj.fourier_coefficients_group.get_fc_group(run_id)\n",
    "fc_decimation_level = fc_group.get_decimation_level(decimation_level_id)\n",
    "stft_obj = fc_decimation_level.to_xarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "aa2f4b06-2d10-4d78-adc7-27cbaf282e3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.208185Z",
     "iopub.status.busy": "2025-08-03T00:32:44.207854Z",
     "iopub.status.idle": "2025-08-03T00:32:44.227478Z",
     "shell.execute_reply": "2025-08-03T00:32:44.226845Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:    (time: 8829, frequency: 64)\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 2020-06-02T22:24:55 ... 2020-06-12T17:49:43\n",
       "  * frequency  (frequency) float64 0.0 0.007812 0.01562 ... 0.4766 0.4844 0.4922\n",
       "Data variables:\n",
       "    ex         (time, frequency) complex128 (nan+nanj) ... (6.439846518048696...\n",
       "    ey         (time, frequency) complex128 (nan+nanj) ... (1.142053688276462...\n",
       "    hx         (time, frequency) complex128 0j ... (-7.255455721291725e-13+2....\n",
       "    hy         (time, frequency) complex128 0j ... (-2.641145642245559e-13-1....\n",
       "    hz         (time, frequency) complex128 0j ... (2.871147674970531e-14+1.2...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-9b002977-838d-4a00-9cf9-8a4813172525' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-9b002977-838d-4a00-9cf9-8a4813172525' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 8829</li><li><span class='xr-has-index'>frequency</span>: 64</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-fe3cc9ab-5154-4948-b484-225149a9fe02' class='xr-section-summary-in' type='checkbox'  checked><label for='section-fe3cc9ab-5154-4948-b484-225149a9fe02' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2020-06-02T22:24:55 ... 2020-06-...</div><input id='attrs-4341af3d-46e2-417c-9032-d0dc8786a1b2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4341af3d-46e2-417c-9032-d0dc8786a1b2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-072d3747-6d59-47d0-8638-2a0f50e9e3c8' class='xr-var-data-in' type='checkbox'><label for='data-072d3747-6d59-47d0-8638-2a0f50e9e3c8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2020-06-02T22:24:55.000000000&#x27;, &#x27;2020-06-02T22:26:31.000000000&#x27;,\n",
       "       &#x27;2020-06-02T22:28:07.000000000&#x27;, ..., &#x27;2020-06-12T17:46:31.000000000&#x27;,\n",
       "       &#x27;2020-06-12T17:48:07.000000000&#x27;, &#x27;2020-06-12T17:49:43.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>frequency</span></div><div class='xr-var-dims'>(frequency)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0 0.007812 ... 0.4844 0.4922</div><input id='attrs-8d107793-41d4-4b2a-95ae-e257f2bb4f4c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-8d107793-41d4-4b2a-95ae-e257f2bb4f4c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-71c54640-47df-4d13-9aa0-0477555548d5' class='xr-var-data-in' type='checkbox'><label for='data-71c54640-47df-4d13-9aa0-0477555548d5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0.      , 0.007812, 0.015625, 0.023438, 0.03125 , 0.039062, 0.046875,\n",
       "       0.054688, 0.0625  , 0.070312, 0.078125, 0.085938, 0.09375 , 0.101562,\n",
       "       0.109375, 0.117188, 0.125   , 0.132812, 0.140625, 0.148438, 0.15625 ,\n",
       "       0.164062, 0.171875, 0.179688, 0.1875  , 0.195312, 0.203125, 0.210938,\n",
       "       0.21875 , 0.226562, 0.234375, 0.242188, 0.25    , 0.257812, 0.265625,\n",
       "       0.273438, 0.28125 , 0.289062, 0.296875, 0.304688, 0.3125  , 0.320312,\n",
       "       0.328125, 0.335938, 0.34375 , 0.351562, 0.359375, 0.367188, 0.375   ,\n",
       "       0.382812, 0.390625, 0.398438, 0.40625 , 0.414062, 0.421875, 0.429688,\n",
       "       0.4375  , 0.445312, 0.453125, 0.460938, 0.46875 , 0.476562, 0.484375,\n",
       "       0.492188])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-16f4a55f-1fbe-4342-9dab-c305bb88afad' class='xr-section-summary-in' type='checkbox'  checked><label for='section-16f4a55f-1fbe-4342-9dab-c305bb88afad' class='xr-section-summary' >Data variables: <span>(5)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>ex</span></div><div class='xr-var-dims'>(time, frequency)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>(nan+nanj) ... (6.43984651804869...</div><input id='attrs-8ed7a760-0371-4f58-adb5-63f8848c59af' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-8ed7a760-0371-4f58-adb5-63f8848c59af' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7a84a26c-4588-40b3-9f93-1c9b7da10536' class='xr-var-data-in' type='checkbox'><label for='data-7a84a26c-4588-40b3-9f93-1c9b7da10536' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>ex</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div><div class='xr-var-data'><pre>array([[            nan           +nanj, -2.78081633e-10-1.02555611e-09j,\n",
       "         2.31781444e-10+1.03764950e-09j, ...,\n",
       "        -2.33846288e-13+3.78092145e-13j, -2.47517622e-13+2.97032949e-13j,\n",
       "        -1.74394227e-13+5.33374852e-14j],\n",
       "       [            nan           +nanj, -8.61482145e-10+8.01328799e-10j,\n",
       "         7.58095286e-10-6.14537638e-10j, ...,\n",
       "        -1.02114148e-13+1.87080731e-13j, -1.65973397e-13+1.33987254e-13j,\n",
       "        -5.96086160e-14+4.73218577e-14j],\n",
       "       [            nan           +nanj, -6.04310100e-10+2.78710599e-10j,\n",
       "         2.87240419e-10-4.11793024e-10j, ...,\n",
       "        -7.23711253e-13+1.98678662e-13j, -2.22044210e-14-3.39406903e-14j,\n",
       "         7.41191439e-14+2.94245970e-13j],\n",
       "       ...,\n",
       "       [            nan           +nanj, -4.13217703e-11+1.09955015e-10j,\n",
       "        -6.43407588e-11+3.08625349e-10j, ...,\n",
       "         1.15193186e-14-1.81437181e-13j, -1.21823774e-13+1.25575543e-13j,\n",
       "         2.68503600e-14+6.82965584e-15j],\n",
       "       [            nan           +nanj, -4.32857850e-10-3.61859337e-10j,\n",
       "         4.70934913e-10-1.20136627e-10j, ...,\n",
       "        -3.00292308e-13-2.17749579e-13j,  1.64397728e-13-4.27592123e-14j,\n",
       "        -2.80084815e-14+1.08537469e-13j],\n",
       "       [            nan           +nanj,  8.24399932e-11-4.68078003e-10j,\n",
       "        -1.81195763e-10-8.34900678e-11j, ...,\n",
       "         2.01639036e-13+5.84642545e-14j, -1.51389614e-13+4.86360942e-14j,\n",
       "         6.43984652e-14-3.82770840e-14j]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>ey</span></div><div class='xr-var-dims'>(time, frequency)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>(nan+nanj) ... (1.14205368827646...</div><input id='attrs-b08f9d69-0c81-4f4e-8404-2e87b49ab82a' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b08f9d69-0c81-4f4e-8404-2e87b49ab82a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c5b06ead-8744-4908-abb5-30e0963ae458' class='xr-var-data-in' type='checkbox'><label for='data-c5b06ead-8744-4908-abb5-30e0963ae458' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>ey</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div><div class='xr-var-data'><pre>array([[            nan           +nanj,  2.24109523e-10-2.20063291e-09j,\n",
       "        -2.70714813e-10+6.92055387e-10j, ...,\n",
       "         2.44027285e-13-2.64369387e-13j,  2.46391891e-13+8.79740406e-14j,\n",
       "        -2.72110246e-13-5.01484159e-14j],\n",
       "       [            nan           +nanj,  8.37744975e-11+6.39118736e-10j,\n",
       "         2.94299337e-10-4.30442915e-10j, ...,\n",
       "         1.85210659e-13+1.90104721e-13j, -5.61419609e-13+2.40377703e-13j,\n",
       "         5.36898266e-14+3.48006374e-14j],\n",
       "       [            nan           +nanj,  7.01644026e-10+6.72434881e-10j,\n",
       "        -7.70152439e-10+5.31030346e-11j, ...,\n",
       "         1.35354838e-12-3.68666594e-15j, -8.83914243e-13+6.63218929e-13j,\n",
       "         2.73691205e-13-6.90100572e-13j],\n",
       "       ...,\n",
       "       [            nan           +nanj,  2.83383915e-10-3.59535943e-10j,\n",
       "        -1.32392541e-11-2.75330794e-10j, ...,\n",
       "        -1.69656308e-14-1.33291885e-13j,  3.01989085e-14-7.31435920e-14j,\n",
       "         3.54173301e-14+7.67155485e-15j],\n",
       "       [            nan           +nanj,  1.02555195e-09+3.58597607e-10j,\n",
       "        -9.25542376e-10+2.51864077e-10j, ...,\n",
       "         3.24389377e-13-1.84439414e-14j,  1.06106196e-13-2.31783119e-13j,\n",
       "         1.93022955e-13-3.34814702e-14j],\n",
       "       [            nan           +nanj, -1.69792025e-10+1.76431570e-09j,\n",
       "         2.55786411e-10-4.19642075e-10j, ...,\n",
       "         1.81976577e-13-1.37345020e-13j,  1.29049459e-13-1.14475625e-13j,\n",
       "         1.14205369e-13-3.18528132e-14j]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>hx</span></div><div class='xr-var-dims'>(time, frequency)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>0j ... (-7.255455721291725e-13+2...</div><input id='attrs-59a6a257-40e2-41f1-9a72-40fe5852c7dd' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-59a6a257-40e2-41f1-9a72-40fe5852c7dd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-44c89272-1a51-440c-add4-c6a07b768153' class='xr-var-data-in' type='checkbox'><label for='data-44c89272-1a51-440c-add4-c6a07b768153' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>hx</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div><div class='xr-var-data'><pre>array([[ 0.00000000e+00+0.00000000e+00j, -1.22124822e-10+9.56810817e-10j,\n",
       "         7.27587362e-11-1.79089916e-10j, ...,\n",
       "         1.78993037e-12+5.02586795e-13j, -7.40161806e-13-4.81284097e-13j,\n",
       "         2.56089612e-13+9.29657126e-14j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -4.48172578e-11-1.70731573e-10j,\n",
       "        -1.53307168e-10+1.70750614e-10j, ...,\n",
       "        -1.37650535e-12-1.41075076e-12j,  2.61060423e-14+1.65193640e-12j,\n",
       "         3.12456227e-13-8.32479242e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -7.33513499e-10-3.15180757e-10j,\n",
       "         7.28907440e-10-1.60824211e-10j, ...,\n",
       "        -7.41858908e-13+3.76448956e-13j,  9.33080887e-13-3.29472538e-14j,\n",
       "        -8.40122808e-13-1.77456690e-14j],\n",
       "       ...,\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  9.56179876e-11+6.74016629e-11j,\n",
       "        -1.63808009e-10+1.31740083e-10j, ...,\n",
       "        -1.10552797e-12-1.01533302e-13j,  2.34462037e-13+5.57816493e-13j,\n",
       "         5.36376197e-13-2.04076398e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -7.11773332e-10-7.36268936e-11j,\n",
       "         6.97614926e-10-1.69398622e-10j, ...,\n",
       "         1.72297116e-12+8.20167647e-13j, -8.71131197e-13-5.79327715e-13j,\n",
       "        -1.20383864e-13+2.13182339e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -8.20833359e-11-1.94634200e-09j,\n",
       "        -3.53172812e-11+4.48675795e-10j, ...,\n",
       "         7.25172588e-13+7.17585329e-14j,  9.85224432e-14+1.04423555e-12j,\n",
       "        -7.25545572e-13+2.45581082e-13j]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>hy</span></div><div class='xr-var-dims'>(time, frequency)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>0j ... (-2.641145642245559e-13-1...</div><input id='attrs-3406aa4c-a952-44e3-8ad1-ea970f5401a5' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-3406aa4c-a952-44e3-8ad1-ea970f5401a5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c80df241-01f2-4239-b306-c6688e3a3229' class='xr-var-data-in' type='checkbox'><label for='data-c80df241-01f2-4239-b306-c6688e3a3229' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>hy</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div><div class='xr-var-data'><pre>array([[ 0.00000000e+00+0.00000000e+00j, -2.69139360e-10-3.27457132e-10j,\n",
       "         3.34064367e-10+6.52227778e-10j, ...,\n",
       "         2.05197828e-13+4.96422471e-13j, -4.01936976e-13-2.95612403e-13j,\n",
       "         1.15499285e-15+2.70426027e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -4.87794309e-10+7.30207375e-10j,\n",
       "         3.71187486e-10-5.33219103e-10j, ...,\n",
       "        -9.82721353e-13-5.48484849e-14j,  3.15763350e-13-8.44110591e-15j,\n",
       "        -1.44003454e-13+3.60945634e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  4.20593501e-11+6.57606564e-10j,\n",
       "        -4.07753400e-10-2.62083188e-10j, ...,\n",
       "         8.95829950e-13+1.28460642e-12j,  2.40234163e-14+4.68675591e-13j,\n",
       "        -1.57114847e-13-6.64547641e-13j],\n",
       "       ...,\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -9.71040701e-11+3.33617064e-10j,\n",
       "         2.98305795e-11+2.75436148e-10j, ...,\n",
       "         1.12209304e-12+2.52398549e-13j,  4.49200124e-13+5.51381485e-13j,\n",
       "        -6.66188823e-13-3.20383064e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -4.48271581e-10-3.63347071e-10j,\n",
       "         4.96719471e-10-1.42737790e-10j, ...,\n",
       "        -3.99328165e-13-1.26563314e-12j,  1.55309279e-13+1.02853833e-12j,\n",
       "        -1.67401586e-13-2.72875071e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  1.43521362e-10-6.67292662e-11j,\n",
       "        -2.34067682e-10-7.86691921e-11j, ...,\n",
       "        -1.26139676e-13-6.36051611e-13j,  1.15275429e-13+8.86200682e-13j,\n",
       "        -2.64114564e-13-1.32795709e-13j]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>hz</span></div><div class='xr-var-dims'>(time, frequency)</div><div class='xr-var-dtype'>complex128</div><div class='xr-var-preview xr-preview'>0j ... (2.871147674970531e-14+1....</div><input id='attrs-9f2a7ec3-fdff-4c0d-b49e-0df71173454a' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-9f2a7ec3-fdff-4c0d-b49e-0df71173454a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-02057184-cda9-4910-8937-ee8528c64670' class='xr-var-data-in' type='checkbox'><label for='data-02057184-cda9-4910-8937-ee8528c64670' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>hz</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div><div class='xr-var-data'><pre>array([[ 0.00000000e+00+0.00000000e+00j,  2.51630341e-12-6.35788412e-10j,\n",
       "        -4.63743351e-10+1.60966392e-10j, ...,\n",
       "         5.11612921e-13-1.37845422e-13j,  6.85147432e-14+4.56428238e-13j,\n",
       "        -3.14720053e-13+1.63900463e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j, -3.77740431e-11-5.59007663e-10j,\n",
       "        -3.83040071e-11+4.23867013e-10j, ...,\n",
       "        -8.44286863e-13+2.80090626e-13j,  3.46447816e-13+7.50111545e-14j,\n",
       "        -3.99524577e-13+1.22646755e-14j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  3.80794939e-10-5.00185208e-10j,\n",
       "        -1.71432756e-10+4.16951591e-10j, ...,\n",
       "         8.37403243e-13-1.09218218e-12j, -2.63936205e-13+4.45615192e-13j,\n",
       "        -1.37649370e-13-8.15430875e-13j],\n",
       "       ...,\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  1.33862047e-11-1.66466576e-10j,\n",
       "        -1.92461319e-10-1.67963374e-10j, ...,\n",
       "         9.07606977e-13+1.00779762e-12j, -4.22537695e-13-1.80984718e-13j,\n",
       "         2.80774801e-13+2.06911033e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  4.16952384e-10+7.67995389e-11j,\n",
       "        -2.87672580e-10+4.22721052e-10j, ...,\n",
       "        -2.89760862e-13+2.01001149e-13j,  4.09010214e-13+2.63117355e-14j,\n",
       "        -9.16475549e-14-3.28044359e-13j],\n",
       "       [ 0.00000000e+00+0.00000000e+00j,  3.37472515e-10+8.24460056e-10j,\n",
       "        -1.20866324e-10-3.74678770e-10j, ...,\n",
       "         9.48980965e-13-2.38214885e-13j, -2.85575768e-13+8.73203907e-14j,\n",
       "         2.87114767e-14+1.22450434e-13j]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-434c28a4-bfab-4c39-a0a2-414fa5c50109' class='xr-section-summary-in' type='checkbox'  ><label for='section-434c28a4-bfab-4c39-a0a2-414fa5c50109' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-71960968-5cc6-404b-ab19-da285129814d' class='xr-index-data-in' type='checkbox'/><label for='index-71960968-5cc6-404b-ab19-da285129814d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2020-06-02 22:24:55&#x27;, &#x27;2020-06-02 22:26:31&#x27;,\n",
       "               &#x27;2020-06-02 22:28:07&#x27;, &#x27;2020-06-02 22:29:43&#x27;,\n",
       "               &#x27;2020-06-02 22:31:19&#x27;, &#x27;2020-06-02 22:32:55&#x27;,\n",
       "               &#x27;2020-06-02 22:34:31&#x27;, &#x27;2020-06-02 22:36:07&#x27;,\n",
       "               &#x27;2020-06-02 22:37:43&#x27;, &#x27;2020-06-02 22:39:19&#x27;,\n",
       "               ...\n",
       "               &#x27;2020-06-12 17:35:19&#x27;, &#x27;2020-06-12 17:36:55&#x27;,\n",
       "               &#x27;2020-06-12 17:38:31&#x27;, &#x27;2020-06-12 17:40:07&#x27;,\n",
       "               &#x27;2020-06-12 17:41:43&#x27;, &#x27;2020-06-12 17:43:19&#x27;,\n",
       "               &#x27;2020-06-12 17:44:55&#x27;, &#x27;2020-06-12 17:46:31&#x27;,\n",
       "               &#x27;2020-06-12 17:48:07&#x27;, &#x27;2020-06-12 17:49:43&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, length=8829, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>frequency</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-2f46162e-ebd8-47c0-851d-686157f66247' class='xr-index-data-in' type='checkbox'/><label for='index-2f46162e-ebd8-47c0-851d-686157f66247' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([      0.0, 0.0078125,  0.015625, 0.0234375,   0.03125, 0.0390625,\n",
       "        0.046875, 0.0546875,    0.0625, 0.0703125,  0.078125, 0.0859375,\n",
       "         0.09375, 0.1015625,  0.109375, 0.1171875,     0.125, 0.1328125,\n",
       "        0.140625, 0.1484375,   0.15625, 0.1640625,  0.171875, 0.1796875,\n",
       "          0.1875, 0.1953125,  0.203125, 0.2109375,   0.21875, 0.2265625,\n",
       "        0.234375, 0.2421875,      0.25, 0.2578125,  0.265625, 0.2734375,\n",
       "         0.28125, 0.2890625,  0.296875, 0.3046875,    0.3125, 0.3203125,\n",
       "        0.328125, 0.3359375,   0.34375, 0.3515625,  0.359375, 0.3671875,\n",
       "           0.375, 0.3828125,  0.390625, 0.3984375,   0.40625, 0.4140625,\n",
       "        0.421875, 0.4296875,    0.4375, 0.4453125,  0.453125, 0.4609375,\n",
       "         0.46875, 0.4765625,  0.484375, 0.4921875],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;frequency&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-0de8444c-5e89-4158-993c-48861da032ca' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-0de8444c-5e89-4158-993c-48861da032ca' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:    (time: 8829, frequency: 64)\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 2020-06-02T22:24:55 ... 2020-06-12T17:49:43\n",
       "  * frequency  (frequency) float64 0.0 0.007812 0.01562 ... 0.4766 0.4844 0.4922\n",
       "Data variables:\n",
       "    ex         (time, frequency) complex128 (nan+nanj) ... (6.439846518048696...\n",
       "    ey         (time, frequency) complex128 (nan+nanj) ... (1.142053688276462...\n",
       "    hx         (time, frequency) complex128 0j ... (-7.255455721291725e-13+2....\n",
       "    hy         (time, frequency) complex128 0j ... (-2.641145642245559e-13-1....\n",
       "    hz         (time, frequency) complex128 0j ... (2.871147674970531e-14+1.2..."
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stft_obj"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "ff5edafc-18c9-4ac6-8a73-d3478aac7f53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.229589Z",
     "iopub.status.busy": "2025-08-03T00:32:44.229265Z",
     "iopub.status.idle": "2025-08-03T00:32:44.232453Z",
     "shell.execute_reply": "2025-08-03T00:32:44.231850Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "a2d79ebb-3f30-4cb7-93a8-3cadd953ea62",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.234500Z",
     "iopub.status.busy": "2025-08-03T00:32:44.234349Z",
     "iopub.status.idle": "2025-08-03T00:32:44.249396Z",
     "shell.execute_reply": "2025-08-03T00:32:44.248769Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;ex&#x27; (time: 8829, frequency: 63)&gt;\n",
       "array([[-2.78081633e-10-1.02555611e-09j,  2.31781444e-10+1.03764950e-09j,\n",
       "        -1.41550822e-10-5.30183803e-10j, ...,\n",
       "        -2.33846288e-13+3.78092145e-13j, -2.47517622e-13+2.97032949e-13j,\n",
       "        -1.74394227e-13+5.33374852e-14j],\n",
       "       [-8.61482145e-10+8.01328799e-10j,  7.58095286e-10-6.14537638e-10j,\n",
       "        -4.36876512e-10+4.48085068e-10j, ...,\n",
       "        -1.02114148e-13+1.87080731e-13j, -1.65973397e-13+1.33987254e-13j,\n",
       "        -5.96086160e-14+4.73218577e-14j],\n",
       "       [-6.04310100e-10+2.78710599e-10j,  2.87240419e-10-4.11793024e-10j,\n",
       "         1.95180812e-10+5.92839940e-10j, ...,\n",
       "        -7.23711253e-13+1.98678662e-13j, -2.22044210e-14-3.39406903e-14j,\n",
       "         7.41191439e-14+2.94245970e-13j],\n",
       "       ...,\n",
       "       [-4.13217703e-11+1.09955015e-10j, -6.43407588e-11+3.08625349e-10j,\n",
       "         7.63238077e-11-1.46336863e-10j, ...,\n",
       "         1.15193186e-14-1.81437181e-13j, -1.21823774e-13+1.25575543e-13j,\n",
       "         2.68503600e-14+6.82965584e-15j],\n",
       "       [-4.32857850e-10-3.61859337e-10j,  4.70934913e-10-1.20136627e-10j,\n",
       "        -1.31343395e-11+1.25999723e-10j, ...,\n",
       "        -3.00292308e-13-2.17749579e-13j,  1.64397728e-13-4.27592123e-14j,\n",
       "        -2.80084815e-14+1.08537469e-13j],\n",
       "       [ 8.24399932e-11-4.68078003e-10j, -1.81195763e-10-8.34900678e-11j,\n",
       "         1.11277791e-10-5.20690939e-11j, ...,\n",
       "         2.01639036e-13+5.84642545e-14j, -1.51389614e-13+4.86360942e-14j,\n",
       "         6.43984652e-14-3.82770840e-14j]])\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 2020-06-02T22:24:55 ... 2020-06-12T17:49:43\n",
       "  * frequency  (frequency) float64 0.007812 0.01562 0.02344 ... 0.4844 0.4922\n",
       "Attributes:\n",
       "    component:                     ex\n",
       "    frequency_max:                 0.4921875\n",
       "    frequency_min:                 0.0\n",
       "    hdf5_reference:                &lt;HDF5 object reference&gt;\n",
       "    mth5_type:                     FCChannel\n",
       "    sample_rate_decimation_level:  1.0\n",
       "    sample_rate_window_step:       96.0\n",
       "    time_period.end:               2020-06-12T17:49:43+00:00\n",
       "    time_period.start:             2020-06-02T22:24:55+00:00\n",
       "    units:                         counts</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'ex'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 8829</li><li><span class='xr-has-index'>frequency</span>: 63</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-2d07aa13-bb02-4323-9892-de5606ba044a' class='xr-array-in' type='checkbox' checked><label for='section-2d07aa13-bb02-4323-9892-de5606ba044a' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>(-2.780816325498273e-10-1.0255561120688926e-09j) ... (6.43984651804...</span></div><div class='xr-array-data'><pre>array([[-2.78081633e-10-1.02555611e-09j,  2.31781444e-10+1.03764950e-09j,\n",
       "        -1.41550822e-10-5.30183803e-10j, ...,\n",
       "        -2.33846288e-13+3.78092145e-13j, -2.47517622e-13+2.97032949e-13j,\n",
       "        -1.74394227e-13+5.33374852e-14j],\n",
       "       [-8.61482145e-10+8.01328799e-10j,  7.58095286e-10-6.14537638e-10j,\n",
       "        -4.36876512e-10+4.48085068e-10j, ...,\n",
       "        -1.02114148e-13+1.87080731e-13j, -1.65973397e-13+1.33987254e-13j,\n",
       "        -5.96086160e-14+4.73218577e-14j],\n",
       "       [-6.04310100e-10+2.78710599e-10j,  2.87240419e-10-4.11793024e-10j,\n",
       "         1.95180812e-10+5.92839940e-10j, ...,\n",
       "        -7.23711253e-13+1.98678662e-13j, -2.22044210e-14-3.39406903e-14j,\n",
       "         7.41191439e-14+2.94245970e-13j],\n",
       "       ...,\n",
       "       [-4.13217703e-11+1.09955015e-10j, -6.43407588e-11+3.08625349e-10j,\n",
       "         7.63238077e-11-1.46336863e-10j, ...,\n",
       "         1.15193186e-14-1.81437181e-13j, -1.21823774e-13+1.25575543e-13j,\n",
       "         2.68503600e-14+6.82965584e-15j],\n",
       "       [-4.32857850e-10-3.61859337e-10j,  4.70934913e-10-1.20136627e-10j,\n",
       "        -1.31343395e-11+1.25999723e-10j, ...,\n",
       "        -3.00292308e-13-2.17749579e-13j,  1.64397728e-13-4.27592123e-14j,\n",
       "        -2.80084815e-14+1.08537469e-13j],\n",
       "       [ 8.24399932e-11-4.68078003e-10j, -1.81195763e-10-8.34900678e-11j,\n",
       "         1.11277791e-10-5.20690939e-11j, ...,\n",
       "         2.01639036e-13+5.84642545e-14j, -1.51389614e-13+4.86360942e-14j,\n",
       "         6.43984652e-14-3.82770840e-14j]])</pre></div></div></li><li class='xr-section-item'><input id='section-d2c3f5aa-623f-4a4f-8567-350136fa68c1' class='xr-section-summary-in' type='checkbox'  checked><label for='section-d2c3f5aa-623f-4a4f-8567-350136fa68c1' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2020-06-02T22:24:55 ... 2020-06-...</div><input id='attrs-e8085c09-1832-428c-b527-0a3e70c133bd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e8085c09-1832-428c-b527-0a3e70c133bd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c8e35a86-9d10-4115-a256-f01c4dccb404' class='xr-var-data-in' type='checkbox'><label for='data-c8e35a86-9d10-4115-a256-f01c4dccb404' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([&#x27;2020-06-02T22:24:55.000000000&#x27;, &#x27;2020-06-02T22:26:31.000000000&#x27;,\n",
       "       &#x27;2020-06-02T22:28:07.000000000&#x27;, ..., &#x27;2020-06-12T17:46:31.000000000&#x27;,\n",
       "       &#x27;2020-06-12T17:48:07.000000000&#x27;, &#x27;2020-06-12T17:49:43.000000000&#x27;],\n",
       "      dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>frequency</span></div><div class='xr-var-dims'>(frequency)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.007812 0.01562 ... 0.4844 0.4922</div><input id='attrs-47b04dc2-d616-4f9a-9b70-648c552b50dd' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-47b04dc2-d616-4f9a-9b70-648c552b50dd' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3535dce4-c105-4d03-a19d-6e9f90a2c7b0' class='xr-var-data-in' type='checkbox'><label for='data-3535dce4-c105-4d03-a19d-6e9f90a2c7b0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([0.007812, 0.015625, 0.023438, 0.03125 , 0.039062, 0.046875, 0.054688,\n",
       "       0.0625  , 0.070312, 0.078125, 0.085938, 0.09375 , 0.101562, 0.109375,\n",
       "       0.117188, 0.125   , 0.132812, 0.140625, 0.148438, 0.15625 , 0.164062,\n",
       "       0.171875, 0.179688, 0.1875  , 0.195312, 0.203125, 0.210938, 0.21875 ,\n",
       "       0.226562, 0.234375, 0.242188, 0.25    , 0.257812, 0.265625, 0.273438,\n",
       "       0.28125 , 0.289062, 0.296875, 0.304688, 0.3125  , 0.320312, 0.328125,\n",
       "       0.335938, 0.34375 , 0.351562, 0.359375, 0.367188, 0.375   , 0.382812,\n",
       "       0.390625, 0.398438, 0.40625 , 0.414062, 0.421875, 0.429688, 0.4375  ,\n",
       "       0.445312, 0.453125, 0.460938, 0.46875 , 0.476562, 0.484375, 0.492188])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-9f79587a-9a22-4b8f-a7e5-db102fc5b581' class='xr-section-summary-in' type='checkbox'  ><label for='section-9f79587a-9a22-4b8f-a7e5-db102fc5b581' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-c81d1a26-2368-4622-9a14-4d1b7ed8768a' class='xr-index-data-in' type='checkbox'/><label for='index-c81d1a26-2368-4622-9a14-4d1b7ed8768a' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2020-06-02 22:24:55&#x27;, &#x27;2020-06-02 22:26:31&#x27;,\n",
       "               &#x27;2020-06-02 22:28:07&#x27;, &#x27;2020-06-02 22:29:43&#x27;,\n",
       "               &#x27;2020-06-02 22:31:19&#x27;, &#x27;2020-06-02 22:32:55&#x27;,\n",
       "               &#x27;2020-06-02 22:34:31&#x27;, &#x27;2020-06-02 22:36:07&#x27;,\n",
       "               &#x27;2020-06-02 22:37:43&#x27;, &#x27;2020-06-02 22:39:19&#x27;,\n",
       "               ...\n",
       "               &#x27;2020-06-12 17:35:19&#x27;, &#x27;2020-06-12 17:36:55&#x27;,\n",
       "               &#x27;2020-06-12 17:38:31&#x27;, &#x27;2020-06-12 17:40:07&#x27;,\n",
       "               &#x27;2020-06-12 17:41:43&#x27;, &#x27;2020-06-12 17:43:19&#x27;,\n",
       "               &#x27;2020-06-12 17:44:55&#x27;, &#x27;2020-06-12 17:46:31&#x27;,\n",
       "               &#x27;2020-06-12 17:48:07&#x27;, &#x27;2020-06-12 17:49:43&#x27;],\n",
       "              dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, length=8829, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>frequency</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-46a1f880-5a5a-433e-a83d-7710f41c3c2f' class='xr-index-data-in' type='checkbox'/><label for='index-46a1f880-5a5a-433e-a83d-7710f41c3c2f' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0.0078125,  0.015625, 0.0234375,   0.03125, 0.0390625,  0.046875,\n",
       "       0.0546875,    0.0625, 0.0703125,  0.078125, 0.0859375,   0.09375,\n",
       "       0.1015625,  0.109375, 0.1171875,     0.125, 0.1328125,  0.140625,\n",
       "       0.1484375,   0.15625, 0.1640625,  0.171875, 0.1796875,    0.1875,\n",
       "       0.1953125,  0.203125, 0.2109375,   0.21875, 0.2265625,  0.234375,\n",
       "       0.2421875,      0.25, 0.2578125,  0.265625, 0.2734375,   0.28125,\n",
       "       0.2890625,  0.296875, 0.3046875,    0.3125, 0.3203125,  0.328125,\n",
       "       0.3359375,   0.34375, 0.3515625,  0.359375, 0.3671875,     0.375,\n",
       "       0.3828125,  0.390625, 0.3984375,   0.40625, 0.4140625,  0.421875,\n",
       "       0.4296875,    0.4375, 0.4453125,  0.453125, 0.4609375,   0.46875,\n",
       "       0.4765625,  0.484375, 0.4921875],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;frequency&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-227e5679-9737-4bc7-8149-2f9fb1fa8dbb' class='xr-section-summary-in' type='checkbox'  ><label for='section-227e5679-9737-4bc7-8149-2f9fb1fa8dbb' class='xr-section-summary' >Attributes: <span>(10)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>component :</span></dt><dd>ex</dd><dt><span>frequency_max :</span></dt><dd>0.4921875</dd><dt><span>frequency_min :</span></dt><dd>0.0</dd><dt><span>hdf5_reference :</span></dt><dd>&lt;HDF5 object reference&gt;</dd><dt><span>mth5_type :</span></dt><dd>FCChannel</dd><dt><span>sample_rate_decimation_level :</span></dt><dd>1.0</dd><dt><span>sample_rate_window_step :</span></dt><dd>96.0</dd><dt><span>time_period.end :</span></dt><dd>2020-06-12T17:49:43+00:00</dd><dt><span>time_period.start :</span></dt><dd>2020-06-02T22:24:55+00:00</dd><dt><span>units :</span></dt><dd>counts</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray 'ex' (time: 8829, frequency: 63)>\n",
       "array([[-2.78081633e-10-1.02555611e-09j,  2.31781444e-10+1.03764950e-09j,\n",
       "        -1.41550822e-10-5.30183803e-10j, ...,\n",
       "        -2.33846288e-13+3.78092145e-13j, -2.47517622e-13+2.97032949e-13j,\n",
       "        -1.74394227e-13+5.33374852e-14j],\n",
       "       [-8.61482145e-10+8.01328799e-10j,  7.58095286e-10-6.14537638e-10j,\n",
       "        -4.36876512e-10+4.48085068e-10j, ...,\n",
       "        -1.02114148e-13+1.87080731e-13j, -1.65973397e-13+1.33987254e-13j,\n",
       "        -5.96086160e-14+4.73218577e-14j],\n",
       "       [-6.04310100e-10+2.78710599e-10j,  2.87240419e-10-4.11793024e-10j,\n",
       "         1.95180812e-10+5.92839940e-10j, ...,\n",
       "        -7.23711253e-13+1.98678662e-13j, -2.22044210e-14-3.39406903e-14j,\n",
       "         7.41191439e-14+2.94245970e-13j],\n",
       "       ...,\n",
       "       [-4.13217703e-11+1.09955015e-10j, -6.43407588e-11+3.08625349e-10j,\n",
       "         7.63238077e-11-1.46336863e-10j, ...,\n",
       "         1.15193186e-14-1.81437181e-13j, -1.21823774e-13+1.25575543e-13j,\n",
       "         2.68503600e-14+6.82965584e-15j],\n",
       "       [-4.32857850e-10-3.61859337e-10j,  4.70934913e-10-1.20136627e-10j,\n",
       "        -1.31343395e-11+1.25999723e-10j, ...,\n",
       "        -3.00292308e-13-2.17749579e-13j,  1.64397728e-13-4.27592123e-14j,\n",
       "        -2.80084815e-14+1.08537469e-13j],\n",
       "       [ 8.24399932e-11-4.68078003e-10j, -1.81195763e-10-8.34900678e-11j,\n",
       "         1.11277791e-10-5.20690939e-11j, ...,\n",
       "         2.01639036e-13+5.84642545e-14j, -1.51389614e-13+4.86360942e-14j,\n",
       "         6.43984652e-14-3.82770840e-14j]])\n",
       "Coordinates:\n",
       "  * time       (time) datetime64[ns] 2020-06-02T22:24:55 ... 2020-06-12T17:49:43\n",
       "  * frequency  (frequency) float64 0.007812 0.01562 0.02344 ... 0.4844 0.4922\n",
       "Attributes:\n",
       "    component:                     ex\n",
       "    frequency_max:                 0.4921875\n",
       "    frequency_min:                 0.0\n",
       "    hdf5_reference:                <HDF5 object reference>\n",
       "    mth5_type:                     FCChannel\n",
       "    sample_rate_decimation_level:  1.0\n",
       "    sample_rate_window_step:       96.0\n",
       "    time_period.end:               2020-06-12T17:49:43+00:00\n",
       "    time_period.start:             2020-06-02T22:24:55+00:00\n",
       "    units:                         counts"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex = stft_obj.ex\n",
    "ex = ex.dropna(dim=\"frequency\")\n",
    "ex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "90473a26-579b-4ea9-98b1-c89a3994b05f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.251432Z",
     "iopub.status.busy": "2025-08-03T00:32:44.251278Z",
     "iopub.status.idle": "2025-08-03T00:32:44.265888Z",
     "shell.execute_reply": "2025-08-03T00:32:44.265272Z"
    }
   },
   "outputs": [],
   "source": [
    "ex = np.abs(ex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a2fb4c9e-1f74-40b0-9778-5f35e304010b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.268346Z",
     "iopub.status.busy": "2025-08-03T00:32:44.267922Z",
     "iopub.status.idle": "2025-08-03T00:32:44.272801Z",
     "shell.execute_reply": "2025-08-03T00:32:44.272290Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['2020-06-02T22:24:55.000000000', '2020-06-02T22:26:31.000000000',\n",
       "       '2020-06-02T22:28:07.000000000', ...,\n",
       "       '2020-06-12T17:46:31.000000000', '2020-06-12T17:48:07.000000000',\n",
       "       '2020-06-12T17:49:43.000000000'], dtype='datetime64[ns]')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ex.time.data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28798f8d-38df-43b7-a424-44127042b3c6",
   "metadata": {},
   "source": [
    "Plotting spectrograms with dates:\n",
    "\n",
    "The cell below was adapted from:\n",
    "\n",
    "https://stackoverflow.com/questions/23139595/dates-in-the-xaxis-for-a-matplotlib-plot-with-imshow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "8a699e1a-0880-4f5e-85b3-5672eed2c2e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.274948Z",
     "iopub.status.busy": "2025-08-03T00:32:44.274517Z",
     "iopub.status.idle": "2025-08-03T00:32:44.623507Z",
     "shell.execute_reply": "2025-08-03T00:32:44.622837Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkwAAAHCCAYAAAAdNpb2AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOy9ebgtRXU2/lbvc869l1FAQFADggMqGAwgjgGNESMOOACODBrFATXyM1GjEceQaB6HiGIwKA4QDAa/GAeME8YpUZw+h0gUATUoKigy3nvP7vr90b2q37VqVXfvc8/lXv32ep5z9t7dVatWrVpTVa2uDjHGiDnMYQ5zmMMc5jCHORSh2tIEzGEOc5jDHOYwhzls7TAPmOYwhznMYQ5zmMMcBmAeMM1hDnOYwxzmMIc5DMA8YJrDHOYwhznMYQ5zGIB5wDSHOcxhDnOYwxzmMADzgGkOc5jDHOYwhznMYQDmAdMc5jCHOcxhDnOYwwDMA6Y5zGEOc5jDHOYwhwGYB0xzmMMc5jCHOcxhDgMwD5jmoODss89GCAGXX375libl/2m46KKLEELARRddlK6dcMIJ2HvvvW+R9i+//HKEEHD22WffIu3N4bcDLrzwQhx44IFYu3YtQgj49a9/vaVJmsNmBvEJF1988ZYmZYvDPGCaw1YJX/7yl/HsZz8bBx10EBYXFxFC6C1/1lln4a53vSvWrl2LO93pTnjLW94yc5tve9vbEELAoYceulKyb1G48cYb8YpXvEIFVVszXH/99Tj11FOx//77Y9ttt8Uuu+yCAw88EM9//vNx5ZVXbmnycO655+JNb3rTliZjq4Wrr74axxxzDNatW4e3vvWteO9734ttt912s7d76aWX4qSTTsI+++yDtWvXYocddsD97nc/vPnNb8ZNN92UlZ9Op9hzzz0RQsDHPvaxIt7Pf/7z+JM/+RPc9ra3xdq1a/F7v/d7eMQjHoFzzz03K/uhD30If/AHf5DKnXrqqVheXu6l++lPfzpCCHj4wx8+e6fnsFXCwpYmYA5z8OCjH/0o/vEf/xH3uMc9sM8+++B//ud/imX/4R/+Ac985jPx2Mc+Fqeccgo+97nP4XnPex5uvPFGvOhFLxrd5jnnnIO9994bX/7yl/GDH/wAd7zjHVejK6sG73jHO1DXdfp944034pWvfCUA4PDDD99CVI2DjRs34g//8A/xve99D8cffzye+9zn4vrrr8d3vvMdnHvuuXj0ox+NPffcc4vSeO655+Lb3/42/uzP/myL0rG1wle+8hVcd911ePWrX40HP/jBt0ibH/nIR3D00UdjzZo1OO6447D//vtjw4YN+PznP48///M/x3e+8x2ceeaZqs6nP/1p/PSnP8Xee++Nc845B3/yJ3+S4T3//PNx7LHHpoB9p512wmWXXYb/+I//wDve8Q488YlPTGU/9rGP4aijjsLhhx+Ot7zlLfjWt76F17zmNfj5z3+OM844w6X74osvxtlnn421a9euLkPmsGUhzmEOBO9617sigHjZZZdtUTp+9rOfxRtvvDHGGONznvOcWBLVG2+8Me6yyy7xyCOPVNef9KQnxW233TZec801o9r74Q9/GAHECy64IO66667xFa94xaZ1YBPhM5/5TAQQP/OZzxTL/OIXv4gA4qmnnrrq7V922WURQHzXu961Kvj++Z//OQKI55xzTnbvpptuitdee+2qtLMpcOSRR8a99tprVNmbbropTqfTzUtQCxs3bozr16+/Rdrqg3e/+90RQPzKV76yajivv/764r0f/vCHcbvttov77bdfvPLKK7P73//+9+Ob3vSm7Ppxxx0X/+AP/iC++c1vjttuu63bxt3udrd497vf3eXrVVddlZX9/d///bhx48Z07aUvfWkMIcT//u//zurXdR3vc5/7xKc+9alxr732ymzTpkIfzzYHiE9YzXH/bYX5ltwcRsHb3vY23P3ud8eaNWuw55574jnPeY6bv/DWt74V++yzD9atW4d73ete+NznPofDDz985hWQ3XffHevWrRss95nPfAZXX301nv3sZ6vrz3nOc3DDDTfgIx/5yKj2zjnnHOy000448sgj8bjHPQ7nnHNOVkbyev7u7/4u9XObbbbBQx7yEPz4xz9GjBGvfvWrcbvb3Q7r1q3Dox71KFxzzTUKx957742HP/zh+Pd///eUC3K3u90NF1xwwSCNnMN0+eWXY9dddwUAvPKVr0QIASEEvOIVrwCAIs+9PKhf//rXOOGEE7DjjjviVre6FY4//vhibsr3vvc9PO5xj8POO++MtWvX4uCDD8aHPvShQdovvfRSAMD97ne/7J5sszCN2223HX74wx/iiCOOwLbbbos999wTr3rVqxBjVHXrusab3vQm3P3ud8fatWux++6746STTsKvfvWrrJ2PfexjOOyww7D99ttjhx12wCGHHJK2Xw4//HB85CMfwRVXXJF4KXySfLLzzjsPL3vZy3Db294W22yzDX7zm98AaFYrDjroIKxbtw63vvWt8eQnPxn/+7//m7V//vnn4253uxvWrl2L/fffHx/84Aez8WAZe9Ob3oR9990Xa9aswXe/+11s2LABL3/5y3HQQQdhxx13xLbbbosHPOAB+MxnPqPaWQ05tXD44Yfj+OOPBwAccsghCCHghBNOUH0b4oGM66WXXoqHPexh2H777fGkJz2p2ObrXvc6XH/99TjrrLOwxx57ZPfveMc74vnPf766dtNNN+GDH/wgHv/4x+OYY47BTTfdhH/913/N6l566aU45JBDsLS0lN3bbbfd0vfvfve7+O53v4tnPOMZWFjoNmSe/exnI8aID3zgA1n99773vfj2t7+N1772tcW+jYVXvOIVCCHgu9/9Lp74xCdip512wv3vf38A43Wc5eHMM89MMnXIIYfgK1/5ymhabrzxRpx00knYZZddsMMOO+C4445z9ex3GeZbcnMYhFe84hV45StfiQc/+MF41rOehUsuuQRnnHEGvvKVr+ALX/gCFhcXAQBnnHEGTj75ZDzgAQ/AC17wAlx++eU46qijsNNOO+F2t7vdZqHt61//OgDg4IMPVtcPOuggVFWFr3/963jyk588iOecc87BYx7zGCwtLeEJT3hC6t8hhxzilt2wYQOe+9zn4pprrsHrXvc6HHPMMXjQgx6Eiy66CC960Yvwgx/8AG95y1vwwhe+EO985ztV/e9///s49thj8cxnPhPHH3883vWud+Hoo4/GhRdeiD/+4z8e1e9dd90VZ5xxBp71rGfh0Y9+NB7zmMcAAO5xj3uMqi8QY8SjHvUofP7zn8czn/lM3PWud8UHP/jB5BwZvvOd7+B+97sfbnvb2+LFL34xtt12W/zzP/8zjjrqKPzLv/wLHv3oRxfb2WuvvQAA73nPe/Cyl71sMCdtOp3ioQ99KO5973vjda97HS688MKUN/KqV70qlTvppJNw9tln48QTT8Tznvc8XHbZZTj99NPx9a9/Xcnm2Wefjac+9am4+93vjpe85CW41a1uha9//eu48MIL8cQnPhEvfelLce211+InP/kJ3vjGNwIAtttuO0XTq1/9aiwtLeGFL3wh1q9fj6WlpdT2IYccgtNOOw1XXXUV3vzmN+MLX/gCvv71r+NWt7oVgGZr6dhjj8UBBxyA0047Db/61a/wtKc9Dbe97W3d/r/rXe/CzTffjGc84xlYs2YNdt55Z/zmN7/BP/7jP+IJT3gCnv70p+O6667DWWedhSOOOAJf/vKXceCBByocmyqnDC996Utxl7vcBWeeeSZe9apX4Q53uAP23XffxNsxPACA5eVlHHHEEbj//e+Pv/u7v8M222xTbPPf/u3fsM8+++C+971vsYyFD33oQ7j++uvx+Mc/Hre5zW1w+OGH45xzzlFbbEAjj5/61Kfwk5/8pNc2lezLnnvuidvd7nbpvsB1112HF73oRfjLv/xL3OY2txlN9xAcffTRuNOd7oS//uu/ziYNY+Hcc8/Fddddh5NOOgkhBLzuda/DYx7zGPzwhz9MetIHJ598Mm51q1vhFa94RfIBV1xxRZpQ/D8BW3J5aw5bH9gtuZ///OdxaWkpPuQhD1FbEKeffnoEEN/5znfGGGNcv3593GWXXeIhhxyilq7PPvvsCCAedthhK6apb0vuOc95TpxMJu69XXfdNT7+8Y8fxH/xxRdHAPETn/hEjLFZUr/d7W4Xn//856tysk216667xl//+tfp+kte8pIIIFu2f8ITnhCXlpbizTffnK7ttddeEUD8l3/5l3Tt2muvjXvssUe85z3vma55W3LHH3+82jLq25I77LDDXJ5bHP/n//yfCCC+7nWvS9eWl5fjAx7wgGxL7o/+6I/iAQccoPpT13W8733vG+90pztlbTHceOON8S53uUsEEPfaa694wgknxLPOOivb/hAaAcTnPve5qp0jjzwyLi0txV/84hcxxhg/97nPudt8F154obr+61//Om6//fbx0EMPjTfddJMqW9d1+l7akpOx2GeffdI2cYwxbtiwIe62225x//33V3g//OEPRwDx5S9/ebp2wAEHxNvd7nbxuuuuS9cuuuiixA8BkbEddtgh/vznP1d0LC8vZ1tIv/rVr+Luu+8en/rUp2Y4NkVOPfC2ZmbhgYzri1/84t52Ymx0AkB81KMeNViW4eEPf3i83/3ul36feeaZcWFhIePlWWedFQHEpaWl+MAHPjD+1V/9Vfzc5z6XbbO+/vWvjwDij370o6ytQw45JN773vdW1174whfGO9zhDomXm7old+qpp0YA8QlPeEJ2b6yOizzssssuKkXhX//1XyOA+G//9m+9NMi4H3TQQXHDhg3p+ute97oIIP7rv/7r7B37LYX5ltwceuGTn/wkNmzYgD/7sz9DVXXi8vSnPx077LBD2vK6+OKLcfXVV+PpT3+6Wrp+0pOehJ122mmz0XfTTTe5y+pAs9XjPUVj4ZxzzsHuu++OBz7wgQCAEAKOPfZYnHfeeZhOp1n5o48+GjvuuGP6LU/VPfnJT1Z9P/TQQ7Fhw4Zsa2LPPfdUqzGyvP31r38dP/vZzwbpXU346Ec/ioWFBTzrWc9K1yaTCZ773Oeqctdccw0+/elP45hjjsF1112HX/7yl/jlL3+Jq6++GkcccQS+//3vu9tQAuvWrcN//dd/4c///M8BNKsST3va07DHHnvguc99LtavX5/VOfnkk9P3EAJOPvlkbNiwAZ/85CcBNNtAO+64I/74j/840fPLX/4SBx10ELbbbru0VfWJT3wC1113HV784hdnSbizzIyPP/54tU188cUX4+c//zme/exnK7xHHnkk9ttvv6QbV155Jb71rW/huOOOU6tWhx12GA444AC3rcc+9rFpy1VgMpkkWa/rGtdccw2Wl5dx8MEH42tf+1qGY1PldAyM5QEDy1oJZLtz++23H03L1VdfjY9//ON4whOekK499rGPRQgB//zP/6zKPvWpT8WFF16Iww8/HJ///Ofx6le/Gg94wANwpzvdCV/84hdTObEfa9asydqz9uV//ud/8OY3vxmvf/3r3fKbAs985jM3Gcexxx6rbPEDHvAAAMAPf/jDUfWf8YxnqJWoZz3rWVhYWMBHP/rRTabttwXmAdMceuGKK64AANzlLndR15eWlrDPPvuk+/JpnyxbWFjYrGcHrVu3Dhs2bHDv3XzzzYN5UNPpFOeddx4e+MAH4rLLLsMPfvAD/OAHP8Chhx6Kq666Cp/61KeyOr/3e7+nfotTuv3tb+9et/v8d7zjHTNHfec73xkAbvHzr6644grsscce2faTHe8f/OAHiDHir/7qr7Drrruqv1NPPRUA8POf/7y3rR133BGve93rcPnll+Pyyy/HWWedhbvc5S44/fTT8epXv1qVraoK++yzj7pmefT9738f1157LXbbbbeMpuuvvz7RI/lT+++//wycyeEOd7iD+l3SDQDYb7/9BnWjdM1rS+Dd73437nGPe2Dt2rXYZZddsOuuu+IjH/kIrr322qzspsrpGBjLA4GFhYVR2/OS03bdddeNpuX9738/Nm7ciHve855Jj6+55hoceuihbk7iEUccgY9//OP49a9/jf/4j//Ac57zHFxxxRV4+MMfnmRH7IcX0Fv78vznPx/3ve998djHPnY0zWOhJA+zgJUHCZ7Gjvud7nQn9Xu77bbDHnvs8f/UmX3zHKY5/FbDHnvsgel0ip///OcqWXPDhg24+uqrBx9Vl0eQzzvvPJx33nnZ/XPOOQcPechD1LXJZOLiKl2PK8w52BQIIbjteitmY0COM3jhC1+II444wi0zyzEMe+21F5761Kfi0Y9+NPbZZx+cc845eM1rXjMzTbvttpvrDAFkKzSbCmMeQticbb3vfe/DCSecgKOOOgp//ud/jt122w2TyQSnnXZaCgoZtkY5XbNmjVqpLsEOO+yAPffcE9/+9rdH4xY58B4sAJqVFBuEA8A222yDBzzgAXjAAx6AW9/61njlK1+Jj33sYzj++ONTsvlPf/rTLND86U9/invd614AGjty4YUX4oILLlABxPLyMm666SZcfvnl2HnnndXDDbOAJw+z6vjWZJ9+W2EeMM2hFyRZ95JLLlHGZsOGDbjsssvSeSxS7gc/+EHa2gIag3H55ZfPnIw8FiTR9eKLL8bDHvawdP3iiy9GXddZIqyFc845B7vtthve+ta3ZvcuuOACfPCDH8Tb3/72VXWWslrDq0xyztQsq3F920k77bSTu9RuZ/yS/Hr99derVaZLLrlElZOxX1xcXNUzeHbaaSfsu+++mWOs6xo//OEP06oSkPNo3333xSc/+Unc73736x0fSU7+9re/3RvUzZq4yrrxoAc9SN275JJL0n3WDQvetRJ84AMfwD777IMLLrhA0SorfFsCxvJgJfDwhz8cZ555Jr70pS/hPve5T2/Zyy67DF/84hdx8skn47DDDlP36rrGU57yFJx77rl42cte1otHkrt/+tOfAtD2RYIjoNlm/clPfoJnPOMZAIAf/ehHAJAevmD43//9X9zhDnfAG9/4xlU942usjq8WfP/731e2/frrr8dPf/pTZXd/12G+JTeHXnjwgx+MpaUl/P3f/72aiZx11lm49tprceSRRwJoDM0uu+yCd7zjHeoE3HPOOWezPnr6oAc9CDvvvHN2gNwZZ5yBbbbZJtHnwU033YQLLrgAD3/4w/G4xz0u+zv55JNx3XXXjXpsfha48sor8cEPfjD9/s1vfoP3vOc9OPDAA2d6skaeMPKOANh3333xve99D7/4xS/StW9+85v4whe+oMo97GEPw/LysuLfdDrNTkrfbbfdcPjhh+Mf/uEfkjNh4HY8+OY3v4lf/vKX2fUrrrgC3/3ud90tndNPPz19jzHi9NNPx+LiIv7oj/4IAHDMMcdgOp1m23lAE6gLXx7ykIdg++23x2mnnYabb75ZlWOZ3nbbbd2trRIcfPDB2G233fD2t79dbdl87GMfw3//938n2dtzzz2x//774z3veQ+uv/76VO6zn/0svvWtb41uT1YImOb/+q//wpe+9KXROFYbxvJgJfAXf/EX2HbbbfGnf/qnuOqqq7L7l156Kd785jcD6FaX/uIv/iLT42OOOQaHHXaYWon0ttoBpHwckce73/3u2G+//XDmmWeqlZszzjgDIQQ87nGPA9DYoQ9+8IPZ36677oqDDz4YH/zgB/GIRzxixbzwYKyOrxaceeaZ2LhxY/p9xhlnYHl52T0Y9HcV5itMc+iFXXfdFS95yUvwyle+Eg996EPxyEc+Epdccgne9ra34ZBDDkmP7C8tLeEVr3gFnvvc5+JBD3oQjjnmGFx++eU4++yzse+++848e7/iiivw3ve+FwDSO4xky2avvfbCU57yFADNUvWrX/1qPOc5z8HRRx+NI444Ap/73Ofwvve9D6997Wux8847F9v40Ic+hOuuuw6PfOQj3fv3vve9seuuu+Kcc87BscceOxP9fXDnO98ZT3va0/CVr3wFu+++O975znfiqquuwrve9a6Z8Kxbtw53u9vd8P73vx93vvOdsfPOO2P//ffH/vvvj6c+9al4wxvegCOOOAJPe9rT8POf/xxvf/vbcfe73z0l1ALAIx7xCNzvfvfDi1/8Ylx++eXpTCgvcHjrW9+K+9///jjggAPw9Kc/Hfvssw+uuuoqfOlLX8JPfvITfPOb3yzS+olPfAKnnnoqHvnIR+Le9753Omfpne98J9avX5/OjxJYu3YtLrzwQhx//PE49NBD8bGPfQwf+chH8Jd/+Zdpq+2www7DSSedhNNOOw3f+MY38JCHPASLi4v4/ve/j/PPPx9vfvOb8bjHPQ477LAD3vjGN+JP//RPccghh6TzbL75zW/ixhtvxLvf/W4AzVEU73//+3HKKafgkEMOwXbbbdfr5BYXF/G3f/u3OPHEE3HYYYfhCU94Qnqkfu+998YLXvCCVPav//qv8ahHPQr3u9/9cOKJJ+JXv/oVTj/9dOy///4qiOqDhz/84bjgggvw6Ec/GkceeSQuu+wyvP3tb8fd7na30ThWG2bhwayw77774txzz8Wxxx6Lu971ruqk7y9+8Ys4//zz01lQ55xzDg488MBs20zgkY98JJ773Ofia1/7Gv7gD/4Aj3rUo3CHO9wBj3jEI7DvvvvihhtuwCc/+Un827/9Gw455BA17q9//evxyEc+Eg95yEPw+Mc/Ht/+9rdx+umn40//9E9x17veFUCTH2RzhADgz/7sz7D77rvjqKOOUtdPOOEEvPvd78Zll1224hzPsTq+WrBhwwb80R/9EY455pjkA+5///sX7efvJGyhp/PmsJVC6aTv008/Pe63335xcXEx7r777vFZz3pW/NWvfpXV//u///u41157xTVr1sR73ete8Qtf+EI86KCD4kMf+tCZ6JBHub0/71HaM888M97lLneJS0tLcd99941vfOMb1SPjHjziEY+Ia9eujTfccEOxzAknnBAXFxfjL3/5y/R47utf/3qX1vPPP19d9x7DlseMP/7xj8d73OMecc2aNXG//fbL6o45ViDGGL/4xS/Ggw46KC4tLWVHDLzvfe+L++yzT1xaWooHHnhg/PjHP+7iuPrqq+NTnvKUuMMOO8Qdd9wxPuUpT4lf//rX3ZO+L7300njcccfF29zmNnFxcTHe9ra3jQ9/+MPjBz7wgSIPY2xObX75y18e733ve8fddtstLiwsxF133TUeeeSR8dOf/rQqe/zxx8dtt902XnrppfEhD3lI3GabbeLuu+8eTz31VPd07TPPPDMedNBBcd26dXH77bePBxxwQPyLv/iL7HToD33oQ/G+971vXLduXdxhhx3ive51r/hP//RP6f71118fn/jEJ8Zb3epW6nH/0vgKvP/974/3vOc945o1a+LOO+8cn/SkJ8Wf/OQnWbnzzjsv7rfffnHNmjVx//33jx/60IfiYx/72LjffvulMiUZi7E5AuGv//qvk37d8573jB/+8IeLj5Fvipx60FduDA9kXGeF//mf/4lPf/rT49577x2Xlpbi9ttvH+93v/vFt7zlLfHmm2+O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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import matplotlib.dates as mdates\n",
    "\n",
    "import datetime as dt\n",
    "\n",
    "x_lims = [ex.time.data[0], ex.time.data[-1]]\n",
    "\n",
    "# You can then convert these datetime.datetime objects to the correct\n",
    "# format for matplotlib to work with.\n",
    "x_lims = mdates.date2num(x_lims)\n",
    "\n",
    "# Set y-limits.\n",
    "y_lims = [ex.frequency.data[0], ex.frequency.data[-1]]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "# Using ax.imshow we set two keyword arguments. The first is extent.\n",
    "# We give extent the values from x_lims and y_lims above.\n",
    "# We also set the aspect to \"auto\" which should set the plot up nicely.\n",
    "ax.imshow(np.log10(ex.T), extent = [x_lims[0], x_lims[1],  y_lims[0], y_lims[1]], \n",
    "          aspect='auto', origin='lower' )\n",
    "\n",
    "# # We tell Matplotlib that the x-axis is filled with datetime data, \n",
    "# # this converts it from a float (which is the output of date2num) \n",
    "# # into a nice datetime string.\n",
    "ax.xaxis_date()\n",
    "\n",
    "# # We can use a DateFormatter to choose how this datetime string will look.\n",
    "# # I have chosen HH:MM:SS though you could add DD/MM/YY if you had data\n",
    "# # over different days.\n",
    "date_format = mdates.DateFormatter('%Y-%m-%d')# %H:%M:%S')\n",
    "\n",
    "ax.xaxis.set_major_formatter(date_format)\n",
    "\n",
    "# # This simply sets the x-axis data to diagonal so it fits better.\n",
    "fig.autofmt_xdate()\n",
    "ax.set_ylabel(\"Frequency (Hz)\")\n",
    "ax.set_xlabel(\"Time\")\n",
    "ax.set_title(f\"log_{10} Amplitude Spectrogram for {station_id}, run {run_id}\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eedbbc32-b08b-4be0-a26c-18efdd72f475",
   "metadata": {},
   "source": [
    "# Absolute Minimal Example\n",
    "\n",
    "- This is the code from Figure 3 in the JOSS manuscript intended to show that the processing can be run in 8 lines including saving results to `edi` file format."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "52f879f8-3743-4966-8452-3369c942d703",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.625812Z",
     "iopub.status.busy": "2025-08-03T00:32:44.625362Z",
     "iopub.status.idle": "2025-08-03T00:32:44.629049Z",
     "shell.execute_reply": "2025-08-03T00:32:44.628372Z"
    }
   },
   "outputs": [],
   "source": [
    "from aurora.config.config_creator import ConfigCreator\n",
    "from aurora.pipelines.process_mth5 import process_mth5\n",
    "from mth5.processing import KernelDataset, RunSummary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "7aaf67a8-2bd3-4637-8f3b-fc58d3254a97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-03T00:32:44.631469Z",
     "iopub.status.busy": "2025-08-03T00:32:44.631084Z",
     "iopub.status.idle": "2025-08-03T00:33:10.456244Z",
     "shell.execute_reply": "2025-08-03T00:33:10.455677Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.847251+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.853528+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column fc, adding and setting dtype to <class 'pandas._libs.missing.NAType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.854336+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column remote, adding and setting dtype to <class 'bool'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.855181+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column run_dataarray, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.855931+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column stft, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.856632+0000 | INFO | mth5.processing.kernel_dataset | _add_columns | KernelDataset DataFrame needs column mth5_obj, adding and setting dtype to <class 'NoneType'>.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.872953+0000 | INFO | aurora.config.config_creator | determine_band_specification_style | Bands not defined; setting to EMTF BANDS_DEFAULT_FILE\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31m\u001b[1m2025-08-03T00:32:44.910492+0000 | ERROR | aurora.time_series.window_helpers | available_number_of_windows_in_array | Window is longer than the time series -- no complete windows can be returned\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[31m\u001b[1m2025-08-03T00:32:44.922035+0000 | ERROR | aurora.time_series.window_helpers | available_number_of_windows_in_array | Window is longer than the time series -- no complete windows can be returned\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.937686+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | Processing Summary Dataframe:\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.948890+0000 | INFO | aurora.pipelines.transfer_function_kernel | show_processing_summary | \n",
      "    duration  has_data  n_samples run station       survey       run_hdf5_reference   station_hdf5_reference    fc  remote  stft mth5_obj dec_level  dec_factor  sample_rate  window_duration  num_samples_window  num_samples  num_stft_windows\n",
      "0     2860.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128       2860.0              29.0\n",
      "1     2860.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128        715.0               7.0\n",
      "2     2860.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128        178.0               1.0\n",
      "3     2860.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128         44.0               0.0\n",
      "4   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     769090.0            8011.0\n",
      "5   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     192272.0            2002.0\n",
      "6   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      48068.0             500.0\n",
      "7   769090.0      True     847649   b   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      12017.0             124.0\n",
      "8   167025.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     167025.0            1739.0\n",
      "9   167025.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128      41756.0             434.0\n",
      "10  167025.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      10439.0             108.0\n",
      "11  167025.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128       2609.0              26.0\n",
      "12  856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         0         1.0     1.000000            128.0                 128     856502.0            8921.0\n",
      "13  856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         1         4.0     0.250000            512.0                 128     214125.0            2230.0\n",
      "14  856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         2         4.0     0.062500           2048.0                 128      53531.0             557.0\n",
      "15  856502.0      True    1638043   c   CAS04  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>   False  None     None         3         4.0     0.015625           8192.0                 128      13382.0             139.0\n",
      "16    2860.0      True       2861   a   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128       2860.0              29.0\n",
      "17    2860.0      True       2861   a   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128        715.0               7.0\n",
      "18    2860.0      True       2861   a   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128        178.0               1.0\n",
      "19    2860.0      True       2861   a   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128         44.0               0.0\n",
      "20  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128     769090.0            8011.0\n",
      "21  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128     192272.0            2002.0\n",
      "22  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128      48068.0             500.0\n",
      "23  769090.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128      12017.0             124.0\n",
      "24  167025.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128     167025.0            1739.0\n",
      "25  167025.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128      41756.0             434.0\n",
      "26  167025.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128      10439.0             108.0\n",
      "27  167025.0      True     938510   b   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128       2609.0              26.0\n",
      "28  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         0         1.0     1.000000            128.0                 128     856502.0            8921.0\n",
      "29  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         1         4.0     0.250000            512.0                 128     214125.0            2230.0\n",
      "30  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         2         4.0     0.062500           2048.0                 128      53531.0             557.0\n",
      "31  856502.0      True     856503   c   NVR08  CONUS South  <HDF5 object reference>  <HDF5 object reference>  <NA>    True  None     None         3         4.0     0.015625           8192.0                 128      13382.0             139.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.950804+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total memory: 15.62 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.951686+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Total Bytes of Raw Data: 0.027 GB\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.952451+0000 | INFO | aurora.pipelines.transfer_function_kernel | memory_check | Raw Data will use: 0.171 % of memory\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:44.955681+0000 | WARNING | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | Not all runs will process as a continuous chunk -- in future may need to loop over runlets to check for FCs\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.966820+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | FCs detected -- checking against processing requirements.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.984298+0000 | INFO | mt_metadata.base.metadata | __eq__ | type: hamming != boxcar\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:44.985166+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | window does not agree:  FC Group: window:\n",
      "\tclock_zero_type = ignore\n",
      "\tnormalized = True\n",
      "\tnum_samples = 128\n",
      "\toverlap = 32\n",
      "\ttype = hamming  Processing Config  window:\n",
      "\tclock_zero_type = ignore\n",
      "\tnormalized = True\n",
      "\tnum_samples = 128\n",
      "\toverlap = 32\n",
      "\ttype = boxcar\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.001020+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.25 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.016992+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.0625 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.033581+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.015625 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.240792+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:45.244402+0000 | WARNING | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | Not all runs will process as a continuous chunk -- in future may need to loop over runlets to check for FCs\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.254812+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | FCs detected -- checking against processing requirements.\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.275217+0000 | INFO | mt_metadata.base.metadata | __eq__ | type: hamming != boxcar\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.276026+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | window does not agree:  FC Group: window:\n",
      "\tclock_zero_type = ignore\n",
      "\tnormalized = True\n",
      "\tnum_samples = 128\n",
      "\toverlap = 32\n",
      "\ttype = hamming  Processing Config  window:\n",
      "\tclock_zero_type = ignore\n",
      "\tnormalized = True\n",
      "\tnum_samples = 128\n",
      "\toverlap = 32\n",
      "\ttype = boxcar\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.294051+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.25 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.311285+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.0625 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.327623+0000 | INFO | mt_metadata.transfer_functions.processing.aurora.decimation_level | is_consistent_with_archived_fc_parameters | Sample rates do not agree: fc 0.015625 differs from processing config 1.0\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.547357+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.557508+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: NVR08, run: a-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.780461+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:45.784307+0000 | WARNING | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | Not all runs will process as a continuous chunk -- in future may need to loop over runlets to check for FCs\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:45.796401+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: NVR08, run: b-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.006920+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.016824+0000 | INFO | aurora.pipelines.transfer_function_kernel | mth5_has_fcs | Fourier coefficients not detected for survey: CONUS South, station: NVR08, run: c-- Fourier coefficients will be computed\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.215941+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.218001+0000 | INFO | aurora.pipelines.transfer_function_kernel | check_if_fcs_already_exist | FC levels not present\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.222271+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | Processing config indicates 4 decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:46.223951+0000 | INFO | aurora.pipelines.transfer_function_kernel | valid_decimations | After validation there are 4 valid decimation levels\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:46.523312+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-03T19:10:11+00:00 does not match metadata start 2020-06-02T22:24:55+00:00 updating metatdata value to 2020-06-03T19:10:11+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:46.524536+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-03T19:57:51+00:00 does not match metadata end 2020-06-12T17:52:23+00:00 updating metatdata value to 2020-06-03T19:57:51+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:47.219777+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-03T20:14:13+00:00 does not match metadata start 2020-06-02T22:24:55+00:00 updating metatdata value to 2020-06-03T20:14:13+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:47.646411+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-12T17:52:23+00:00 does not match metadata end 2020-06-14T16:56:02+00:00 updating metatdata value to 2020-06-12T17:52:23+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:47.985164+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-14T16:56:02+00:00 does not match metadata end 2020-07-01T17:32:59+00:00 updating metatdata value to 2020-06-14T16:56:02+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:48.318020+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-12T18:32:17+00:00 does not match metadata start 2020-06-03T20:14:13+00:00 updating metatdata value to 2020-06-12T18:32:17+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:48.741874+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | start time of dataset 2020-06-14T18:00:44+00:00 does not match metadata start 2020-06-12T18:32:17+00:00 updating metatdata value to 2020-06-14T18:00:44+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:48.743601+0000 | WARNING | mth5.timeseries.run_ts | validate_metadata | end time of dataset 2020-06-24T15:55:46+00:00 does not match metadata end 2020-07-01T17:32:59+00:00 updating metatdata value to 2020-06-24T15:55:46+00:00\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:49.208570+0000 | INFO | mth5.processing.kernel_dataset | initialize_dataframe_for_processing | Dataset dataframe initialized successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:49.209500+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 0 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:49.422513+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:49.658873+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:50.338678+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:50.949698+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:51.245785+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:51.572098+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:52.196414+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:52.897359+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:32:52.938331+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:52.947500+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:53.089026+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:53.302650+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:53.525294+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:53.804293+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:54.098688+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:54.441786+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:54.793534+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:55.231371+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:55.400158+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:55.613741+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:55.827542+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:56.093382+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:56.389663+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:56.730479+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:57.090757+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:57.533839+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 25.728968s  (0.038867Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:57.707080+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 19.929573s  (0.050177Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:57.927564+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 15.164131s  (0.065945Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:58.141436+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 11.746086s  (0.085135Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:58.406977+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 9.195791s  (0.108745Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:58.703562+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 7.362526s  (0.135823Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:59.048621+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 5.856115s  (0.170762Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:32:59.402626+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 4.682492s  (0.213562Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:00.004586+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 1\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:00.393184+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 1 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:00.586323+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:00.814049+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:01.151227+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:01.493404+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:01.728864+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:01.993405+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:02.352364+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:02.731312+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:33:02.748199+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:02.755458+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:02.821904+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:02.898998+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.006277+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.101100+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.214234+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.343785+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.423061+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.500680+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.607692+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.703339+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.817350+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:03.947051+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 102.915872s  (0.009717Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.026262+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 85.631182s  (0.011678Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.104221+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 68.881694s  (0.014518Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.211567+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 54.195827s  (0.018452Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.306532+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 43.003958s  (0.023254Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.421212+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 33.310722s  (0.030020Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.686166+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 2\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:04.817897+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 2 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:05.045269+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:05.295774+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:05.504061+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:05.743325+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:05.973721+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.253325+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:33:06.265612+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.273125+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.320719+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.367985+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.420420+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.487761+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.564111+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.660090+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.721592+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.776948+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.829410+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.901057+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:06.978551+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.064091+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 411.663489s  (0.002429Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.125701+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 342.524727s  (0.002919Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.180773+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 275.526776s  (0.003629Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.232979+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 216.783308s  (0.004613Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.297997+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 172.015831s  (0.005813Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.377913+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 133.242890s  (0.007505Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.603731+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | DECIMATION LEVEL 3\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.691082+0000 | INFO | aurora.pipelines.transfer_function_kernel | update_dataset_df | Dataset Dataframe Updated for decimation level 3 Successfully\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:07.932979+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:08.188371+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:08.377409+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:08.595279+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:08.818384+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.074566+0000 | INFO | aurora.time_series.spectrogram_helpers | save_fourier_coefficients | Skip saving FCs. dec_level_config.save_fc =  False\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33m\u001b[1m2025-08-03T00:33:09.084692+0000 | WARNING | aurora.pipelines.feature_weights | extract_features | Features could not be accessed from MTH5 -- \n",
      "Calculating features on the fly (development only)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.091219+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.135847+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.179832+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.224999+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.270513+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.318179+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.363198+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.408700+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.455711+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.502577+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.551293+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1514.701336s  (0.000660Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.596010+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 1042.488956s  (0.000959Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.647068+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 723.371271s  (0.001382Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.693592+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 532.971560s  (0.001876Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.738513+0000 | INFO | aurora.time_series.frequency_band_helpers | get_band_for_tf_estimate | Accessing band 412.837995s  (0.002422Hz)\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:09.953270+0000 | INFO | aurora.pipelines.process_mth5 | process_mth5_legacy | type(tf_cls): <class 'mt_metadata.transfer_functions.core.TF'>\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:10.151977+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2025-08-03T00:33:10.366988+0000 | INFO | mth5.mth5 | close_mth5 | Flushing and closing 8P_CAS04_NVR08.h5\u001b[0m\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Station: 0\n",
       "--------------------------------------------------\n",
       "\tSurvey:        0\n",
       "\tProject:       None\n",
       "\tAcquired by:   None\n",
       "\tAcquired date: 1980-01-01\n",
       "\tLatitude:      0.000\n",
       "\tLongitude:     0.000\n",
       "\tElevation:     0.000\n",
       "\tImpedance:     True\n",
       "\tTipper:        True\n",
       "\tNumber of periods: 25\n",
       "\t\tPeriod Range:   4.68249E+00 -- 1.51470E+03 s\n",
       "\t\tFrequency Range 6.60196E-04 -- 2.13561E-01 s"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "run_summary = RunSummary()\n",
    "run_summary.from_mth5s([\"8P_CAS04_NVR08.h5\",])\n",
    "kernel_dataset = KernelDataset()\n",
    "kernel_dataset.from_run_summary(run_summary, \"CAS04\", \"NVR08\")\n",
    "cc = ConfigCreator()\n",
    "config = cc.create_from_kernel_dataset(kernel_dataset) \n",
    "tf = process_mth5(config, kernel_dataset)\n",
    "tf.write(fn=\"CAS04_rrNVR08.edi\", file_type=\"edi\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "aurora-test",
   "language": "python",
   "name": "aurora-test"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.20"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
