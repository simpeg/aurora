"""
This may wind up in aurora/transfer_function/tf_kernel/dataset.py

2022-06-21: Actually after more consideration, this class should be
called MTH5Dataset(), and should live in mth5_helpers.

It should leverage the @staticmethod decorator so that it returns a modified df
frame.
class MWD():
    def __init__(self):
        pass

    @staticmethod

That
"""

import copy
import pandas as pd

import mth5

from aurora.tf_kernel.helpers import channel_summary_to_run_summary
from aurora.tf_kernel.helpers import extract_run_summaries_from_mth5s

RUN_SUMMARY_COLUMNS = ["station_id", "run_id", "start", "end", "sample_rate",
                       "input_channels", "output_channels", "remote", "mth5_path"]



class RunSummary():
    """
    Could be called "ProcessableDataset", KernelDataset, InputDataset or something
    like that.  This class is intended to work with mth5-derived channel_summary or
    run_summary dataframes, that specify time series intervals. that is

    The main idea is to specify one or two stations, together
    with a list of acquisition "runs" that can be merged into a "processing run".
    Each acquistion run can be further divided into non-overlapping chunks by specifying
    time-intervals associated with that acquistion run.  An empty iterable of
    time-intervals associated with a run is interpretted as the interval
    corresponding to the entire run.

    The time intervals can be used for several purposes but primarily:
    To specify contiguous chunks of data:
    1.  to STFT, that will be made into merged FC data structures
    2. to bind together into xarray time series, for eventual gap fill (and then STFT)
    3. To manage and analyse the availability of reference time series

    The basic data strucutre can be represented as a table or as a tree:
    Station --> run --> [Intervals],
    where the --> symbol is reads "branches that specify (a)".

    This is described in issue #118 https://github.com/simpeg/aurora/issues/118

    Desired Properties
    a) This should be able to take a dictionary (tree) and return the tabular (
    DataFrame) representation and vice versa.
    b) Ability (when there are two or more stations) apply interval intersection
    rules, so that only time intervals when both stations are acquiring data are
    returned

    From (a) above we can see that a simple table per station can
    represent the available data.  That table can be generated by default from
    the mth5, and intervals to exclude some data can be added as needed.

    (b) is really just the case of considering pairs of tables like (a)

    Thinking all that through, we actually want a baseclass StationDataset.
    The RR case could be handled by pairing two of these; StationPairDataset.  That
    would make this thing here a MultiStationDataset.

    The dependencies aren't clear yet.
    Maybe still Dataset:
        Could have methods
            "drop_runs_shorter_than"
            "fill_gaps_by_time_interval"
            "fill_gaps_by_run_names"
            "
    ?MultiStation isa Station
    ?StationPair isa Station


    In a perfect world, we would write the ChannelDataset class here, and make
    StationDataset a collection of ChannelDatasets, but that _should_ be add-inable
    later.  For the full MMT case we could then consider ChannelPairDataset objects.


    2022-03-11:
    Following notes in Issue #118, want to get a fully populated dataframe from an mth5.
    If I pass a station_id, then get all runs, if I pass a (station_id, run_id),
    then just get the run start and end times.

    Question: To return a copy or modify in-place when querying.  Need to decide on
    standards and syntax.  Handling this in general is messy because every function
    needs to be modified.  Maybe better to use a decorator that allows for df kwarg
    to be passed, and if it is not passed the modification is done in place.
    The user who doesn't want to modify in place can work with a clone.

    """
    def __init__(self, **kwargs):
        self.columns = ["station_id", "run_id", "start", "end"]
        self.column_dtypes = [str, str, pd.Timestamp, pd.Timestamp]
        self._input_dict = kwargs.get("input_dict", None)
        self.df = kwargs.get("df", None)


    def clone(self):
        return copy.deepcopy(self)


    def from_mth5s(self, mth5_list):
        run_summary_df = extract_run_summaries_from_mth5s(mth5_list)
        self.df = run_summary_df



    def add_duration(self, df=None):
        """

        Parameters
        ----------
        df

        Returns
        -------

        """
        if df is None:
            df = self.df
        timedeltas = df.end - df.start
        durations = [x.seconds for x in timedeltas]
        df["duration"] = durations
        return

    def drop_runs_shorter_than(self, duration, units="s"):
        if units != "s":
            raise NotImplementedError
        if "duration" not in self.df.columns:
            self.add_duration()
        drop_cond = self.df.duration < duration
        #df = self.df[drop_cond]
        self.df.drop(self.df[drop_cond].index, inplace=True)
        df = df.reset_index()


        self.df = df
        return df


def main():
    return


if __name__ == "__main__":
    main()
