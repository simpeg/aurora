"""
This may wind up in aurora/transfer_function/kernel_dataset.py

"""

import copy
import pandas as pd

import mth5

from aurora.tf_kernel.helpers import channel_summary_to_run_summary
from aurora.tf_kernel.helpers import extract_run_summaries_from_mth5s

RUN_SUMMARY_COLUMNS = ["station_id", "run_id", "start", "end", "sample_rate",
                       "input_channels", "output_channels", "remote", "mth5_path"]



class KernelDataset():
    """
    Could be called "ProcessableDataset", KernelDataset, InputDataset or something
    like that.  This class is intended to work with mth5-derived channel_summary or
    run_summary dataframes, that specify time series intervals.

    This may actually be an extension of RunSummary

    The main idea is to specify one or two stations, together
    with a list of acquisition "runs" that can be merged into a "processing run".
    Each acquistion run can be further divided into non-overlapping chunks by specifying
    time-intervals associated with that acquistion run.  An empty iterable of
    time-intervals associated with a run is interpretted as the interval
    corresponding to the entire run.

    The time intervals can be used for several purposes but primarily:
    To specify contiguous chunks of data:
    1.  to STFT, that will be made into merged FC data structures
    2. to bind together into xarray time series, for eventual gap fill (and then STFT)
    3. To manage and analyse the availability of reference time series

    The basic data strucutre can be represented as a table or as a tree:
    Station --> run --> [Intervals],
    where the --> symbol is reads "branches that specify (a)".

    This is described in issue #118 https://github.com/simpeg/aurora/issues/118

    Desired Properties
    a) This should be able to take a dictionary (tree) and return the tabular (
    DataFrame) representation and vice versa.
    b) Ability (when there are two or more stations) apply interval intersection
    rules, so that only time intervals when both stations are acquiring data are
    returned

    From (a) above we can see that a simple table per station can
    represent the available data.  That table can be generated by default from
    the mth5, and intervals to exclude some data can be added as needed.

    (b) is really just the case of considering pairs of tables like (a)

    Thinking all that through, we actually want a baseclass StationDataset.
    The RR case could be handled by pairing two of these; StationPairDataset.  That
    would make this thing here a MultiStationDataset.


    2022-03-11:
    Following notes in Issue #118, want to get a fully populated dataframe from an mth5.
    If I pass a station_id, then get all runs, if I pass a (station_id, run_id),
    then just get the run start and end times.

    # Question: To return a copy or modify in-place when querying.  Need to decide on
    # standards and syntax.  Handling this in general is messy because every function
    # needs to be modified.  Maybe better to use a decorator that allows for df kwarg
    # to be passed, and if it is not passed the modification is done in place.
    # The user who doesn't want to modify in place can work with a clone.

    """
    def __init__(self, **kwargs):
        self.df = kwargs.get("df")
        self.local_station_id = kwargs.get("local_station_id")
        self.reference_station_id = kwargs.get("reference_station_id")

    def from_run_summary(self, run_summary,
                         local_station_id,
                         reference_station_id=None):
        self.local_station_id = local_station_id
        self.reference_station_id = reference_station_id

        station_ids = [local_station_id,]
        if reference_station_id:
            station_ids.append(reference_station_id)
        df = run_summary.restrict_to_station_list(station_ids,
                                                  overwrite=False,
                                                  df=None)
        df["remote"] = False
        if reference_station_id:
            cond = df.station_id == reference_station_id
            df.remote = cond
        self.df = df


    @property
    def is_single_station(self):
        if self.local_station_id:
            if self.reference_station_id:
                return False
            else:
                return True
        else:
            return False

    @property
    def is_remote_reference(self):
        raise NotImplementedError


    def restrict_run_intervals_to_simultaneous(self):
        raise NotImplementedError







def main():
    return


if __name__ == "__main__":
    main()
